[project]
name = "Jacobson"
version = "0.3.0"
description = 'Self-hosted zipcode API'
readme = "README.md"
requires-python = ">=3.12, <3.14"
license = {text = "AGPL-3.0-or-later"}
keywords = []
authors = [{name = "Krisque", email = "chrisemke@protonmail.com"}]
classifiers = [
	"Development Status :: 4 - Beta",
	"Framework :: AsyncIO",
	"Framework :: FastAPI",
	"Framework :: MkDocs",
	"Framework :: Pydantic",
	"Framework :: Pydantic :: 2",
	"Framework :: Pytest",
	"License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
	"Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
	"alembic>=1.13.3",
	"email-validator>=2.2.0",
	"fastapi-slim>=0.115.2",
	"httpx[http2]>=0.27.2",
	"psycopg[binary]>=3.2.3",
	"pwdlib[argon2]>=0.2.1",
	"pydantic>=2.9.2",
	"pydantic-settings>=2.5.2",
	"pyjwt>=2.9.0",
	"sqlmodel>=0.0.22",
	"strawberry-graphql[fastapi]>=0.246.2",
	"uvicorn[standard]>=0.32.0",
	"greenlet>=3.1.1", # Needed to run alembic for now
]

[project.optional-dependencies]
docs = [
	"mkdocs-material>=9.5.41",
	"mkdocs-site-urls>=0.2.0",
	"mkdocs>=1.6.1",
	"mkdocstrings[python]>=0.26.2",
]
test = [
	"factory-boy>=3.3.1",
	"pytest>=8.3.3",
	"pytest-asyncio>=0.24.0",
	"pytest-cov>=5.0.0",
	"pytest-mock>=3.14.0",
	"respx>=0.21.1",
	"testcontainers[postgres]>=4.8.2",
]

[project.urls]
Documentation = "https://krisque.codeberg.page/jacobson/"
Issues = "https://codeberg.org/Krisque/jacobson/issues"
Source = "https://codeberg.org/Krisque/jacobson"


[tool.uv]
dev-dependencies = [
	"commitizen>=3.29.1",
	"fastapi[standard]>=0.115.2",
	"mypy>=1.12.0",
	"pre-commit>=4.0.1",
	"ruff>=0.6.9",
	"strawberry-graphql[cli]>=0.246.2",
	"taskipy>=1.13.0",
]


[tool.mypy]
python_version = "3.13"
strict = true
explicit_package_bases = true
exclude = ["build", "containers", "tests"]
plugins = ["pydantic.mypy", "strawberry.ext.mypy_plugin"]

[tool.ruff]
target-version = "py313"
indent-width = 1
line-length = 79
fix = true

[tool.ruff.lint]
select = [
	"E",     # pydocstyle
	"W",     # pydocstyle
	"F",     # pyflakes
	"I",     # isort
	"PL",    # Pylint
	"UP",    # pyupgrade
	"D",     # docstrings
	"RUF",   # ruff
	"ASYNC", # flake8-async
	"PT",    # flake8-pytest-style
]
ignore = [
	"D100", # Missing docstring in public module
	"D101", # Missing docstring in public class
	"D104", # Missing docstring in public package
	"D105", # Missing docstring in magic method
	"D203", # 1 blank line required before class docstring
	"D205", # 1 blank line required between summary line and description
	"D211", # no-blank-line-before-class
	"D212", # Multi-line docstring summary should start at the first line
	"D206", # Docstring should be indented with spaces, not tabs
	"D407", # Missing dashed underline after section
	"W191", # Indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D102", "D103", "D106"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
indent-style = "tab"
quote-style = "single"
docstring-code-format = true

[tool.pytest.ini_options]
minversion = "8.3"
addopts = "-vv --no-header -p no:warnings"
asyncio_mode = 'auto'
testpaths = ["tests"]

[tool.taskipy.variables]
container = "podman"

[tool.taskipy.tasks]
build = {cmd = "{container} compose up -d --build", help = "Build containers", use_vars = true}
up = {cmd = "{container} compose up -d", help = "Run containers", use_vars = true}
down = {cmd = "{container} compose down", help = "Turn off containers", use_vars = true}
logs = {cmd = "{container} logs -f -t --color jacobson_app_1", help = "Show api container logs", use_vars = true}
restart = {cmd = "task down; task up", help = "Restart running containers"}

docs_serve = {cmd = "mkdocs serve -w . -a localhost:8008", help = "Serve mkdocs watch all files"}
pre_docs_deploy = {cmd = "mkdocs build", help = "Build mkdocs"}
docs_deploy = {cmd = "mkdocs gh-deploy -b pages", help = "Deploy mkdocs on branch pages"}

hooks = {cmd = "pre-commit run --all-files", help = "Run htoolooks on all files"}
autoupdate_hooks = {cmd = "pre-commit autoupdate", help = "Auto update git hooks"}

post_test = {cmd = "coverage html", help = "Generate coverage html"}
[tool.taskipy.tasks.test]
cmd = "DOCKER_HOST=unix:///run/user/$UID/podman/podman.sock TESTCONTAINERS_RYUK_DISABLED=true pytest --cov=."
help = "Run all tests in current directory"
