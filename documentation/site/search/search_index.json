{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"readme","text":""},{"location":"#jacobson","title":"jacobson","text":"<p>self-hosted zipcode API</p>"},{"location":"#the-initial-structure-i-imagined-would-be","title":"The initial structure I imagined would be:","text":"<pre><code>*api query/get* -&gt; search in database -&gt; if there is any result return;\nelse async call to all plugins that are configured, return and insert on database\n</code></pre> <pre><code>*api mutation/post* -&gt; manually update or insert zipcodes\n</code></pre> <pre><code>call to tell the api to update some register from plugins that are configured\n</code></pre>"},{"location":"#roadmap","title":"ROADMAP:","text":""},{"location":"#done-v01","title":"DONE (v0.1)","text":"<ul> <li> git hooks (pre-commit)</li> <li> ORM (SqlModel)</li> <li> Api's support services (cepaberto, viacep...)</li> <li> Unit tests (pytest)</li> <li> Migrations and data seed (Alembic)</li> </ul>"},{"location":"#done-v02","title":"DONE (v0.2)","text":"<ul> <li> Fix database session with get_db or get_session</li> <li> Start Integration tests</li> <li> Docs (mkdocs + mkdocs-material[to beautify] + mkdocstrings[to transform docstrings into docs])</li> <li> mkdocs on gh pages and/or readthedocs</li> <li> Taskipy</li> <li> Re-enable Coordinates on database and api's (only cep_aberto available)</li> </ul>"},{"location":"#todo-needed-for-v03","title":"TODO (Needed for v0.3)","text":"<ul> <li> Auth (pyjwt+pwdlib)</li> <li> Start Repository architecture on database</li> <li> Add log support (logfire? loguru? OpenTelemetry?)</li> <li> Custom exceptions</li> <li> More test (unit and integration)</li> <li> Healthcheck API</li> </ul>"},{"location":"#todo-needed-until-v10","title":"TODO (Needed until v1.0)","text":"<ul> <li> Fix every raise on graphql, it should be None or GraphqlError !!!!!!!!</li> <li> Populate the database with zip codes and cities</li> <li> Automate migrations tests?</li> <li> separate tests into groups to be run selectively</li> <li> git hooks to run fast and slow tests</li> <li> Resolve all code issues (TODO's on docstrings)</li> <li> CI and CI tests</li> <li> freeze versions on docker and pyproject</li> <li> Better structure for services (plugin-like)</li> <li> Send 'total' information on api requests for pagination</li> <li> Authentication based on keycloak sso (OpenID Connect)</li> </ul>"},{"location":"#todo-nice-to-have","title":"TODO (nice to have)","text":"<ul> <li> add option to seed all cities (or chosen list)</li> <li> add option to seed all zip codes (or chosen list)</li> <li> add graphql schema generator on git hooks</li> <li> move from podman-compose to podman kube</li> <li> study the feasibility of scylladb (db, migrations and)</li> <li> study the feasibility of mypyc</li> <li> jacobson logo</li> </ul>"},{"location":"#dev","title":"DEV","text":"<p>The idea is to just run this command and podman will run the entire dev environment</p> <p>obs: before this command you need to create the .env (see sample.env for example)</p> <p>to run podman as expected, you will need the packages \"podman\", \"podman-compose\" and \"aardvark-dns\"</p> <pre><code>podman compose up -d --build\n</code></pre> <p>or alternatively, if you already have poetry installed you can run the following commands:</p> <pre><code>poetry shell # Create/Enter poetry virtual env\npoetry install # Install all dependencies (needed to run task)\ntask up # Decame podman command\n</code></pre> <p>Available tasks (shown with the <code>task -l</code> command):</p> <pre><code>build            Build containers\nup               Run containers\ndown             Turn off containers\nlogs             Show api container logs\nrestart          Restart running containers\ndocs_serve       Serve mkdocs watch all files\npre_docs_deploy  Build mkdocs\ndocs_deploy      Deploy mkdocs on branch pages\nhooks            Run htoolooks on all files\nautoupdate_hooks Auto update git hooks\npost_test        Generate coverage html\ntest             Run all tests in current directory\n</code></pre> <p>look at the end of the pyproject.toml file to see literally what the tasks do</p> <p>You can access the api at localhost port 8000 /graphql</p> <pre><code>http://localhost:8000/graphql\n</code></pre> <p>If you are in dev mode you can access: * mkdocs at <code>/</code> * Redoc at <code>/redoc</code> * Swagger at <code>/docs</code> * Graphiql ide at <code>/graphql</code></p> <p>Note: Graphiql ide only exists in dev mode</p>"},{"location":"changelog/","title":"changelog","text":""},{"location":"changelog/#01-2024-05-28","title":"0.1 (2024-05-28)","text":""},{"location":"changelog/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>The query has completely changed IO</li> </ul>"},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>protocol-and-viacep: add protocol to ensure all plugins have the right method and add viacep service</li> <li>database-migrations: move from sqlmodel metadata create all to alembic async migrations</li> <li>mutation: add create_address mutation and beta pagination</li> <li>sqlmodel-mariadb: add sqlmodel models, create async session, create tables on startup and add query function with beta filters</li> <li>Initial commit</li> </ul>"},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>brazil-model: change Enum -&gt; StrEnum and table columns order</li> <li>types: remove unused code</li> <li>some docker files</li> <li>continued fixing some wrong features</li> <li>Hooks: Validate merge branches</li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>module-to-namespace: move from modules to namespace</li> <li>api: add docstrings and drop coordinates for now</li> <li>plugins: start base for plugins and cep_aberto service</li> <li>settings: move all .env settings to utils directory</li> <li>pydantic: move pydantic models to sqlmodel models</li> <li>edgedb-jacobson: remove edgedb and legacy jacobson</li> <li>graphql-query: add pydantic and strawberry types to query</li> <li>start edgedb support</li> <li>create docker folders and minor fixes</li> </ul>"},{"location":"changelog/#02-2024-07-31","title":"0.2 (2024-07-31)","text":""},{"location":"changelog/#breaking-change_1","title":"BREAKING CHANGE","text":"<ul> <li>Now postgres is needed because of uuid pk. Remake migrations</li> </ul>"},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>all_address: add joins on filters that depend on other tables</li> <li>background-insert: fix insert on query to run after return</li> <li>plugins-async-error: create async client to run requests async</li> </ul>"},{"location":"changelog/#refactor_1","title":"Refactor","text":"<ul> <li>remake-database: move from mariadb to postgres, re-enable coordinates and move to uuid</li> <li>mkdocs-dev-mode: if dev mode is on, mkdocs is enabled on / of fastapi</li> <li>dev-mode: add dev flag on .env to enable some features like db logs on shell and graphql ide</li> <li>db-session: add graphql context_getter to send the database session to queries and mutations on demand</li> </ul>"},{"location":"containers/","title":"Containers","text":""},{"location":"containers/#containers-module","title":"Containers Module","text":"<p>Todo</p>"},{"location":"containers/#add-information-about-containers-and-how-to-run-them","title":"Add information about containers, and how to run them","text":""},{"location":"license/","title":"LICENSE","text":""},{"location":"license/#license-agpl-3-or-later","title":"License AGPL-3-or-later","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Remote Network Interaction; Use with the GNU General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#tests-module","title":"Tests Module","text":"<p>Todo</p>"},{"location":"tests/#add-information-how-the-files-are-set-and-how-to-test","title":"ADD information how the files are set and how to test","text":""},{"location":"api/app/","title":"app","text":""},{"location":"api/app/#api.app.app","title":"<code>api.app.app = FastAPI(title='Jacobson', description='Self hosted zipcode API', version='0.3.0', openapi_url='/openapi.json' if settings.DEV else None, license_info={'name': 'GNU Affero General Public License v3.0 or later', 'identifier': 'AGPL-3.0-or-later', 'url': 'https://spdx.org/licenses/AGPL-3.0-or-later.html'})</code>  <code>module-attribute</code>","text":""},{"location":"api/app/#api.app.mkdocs","title":"<code>api.app.mkdocs(request)</code>  <code>async</code>","text":"<p>Response de mkdocs site, from result of build. ONLY ENABLED IN DEV MODE.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>Fastapi Request</p> required <p>Returns:</p> Name Type Description <code>HTMLResponse</code> <code>HTMLResponse</code> <p>Mkdocs static site from documentation/site</p> Source code in <code>api/app.py</code> <pre><code>@app.get('/', status_code=HTTPStatus.OK, response_class=HTMLResponse)\nasync def mkdocs(request: Request) -&gt; HTMLResponse:\n\t\"\"\"\n\tResponse de mkdocs site, from result of build.\n\tONLY ENABLED IN DEV MODE.\n\n\tArgs:\n\t\t\trequest (Request): Fastapi Request\n\n\tReturns:\n\t\t\tHTMLResponse: Mkdocs static site from documentation/site\n\n\t\"\"\"\n\treturn templates.TemplateResponse(name='index.html', request=request)\n</code></pre>"},{"location":"api/auth/","title":"auth","text":""},{"location":"api/auth/#api.auth.IsAuthenticated","title":"<code>api.auth.IsAuthenticated</code>","text":"<p>               Bases: <code>BasePermission</code></p> Source code in <code>api/auth.py</code> <pre><code>class IsAuthenticated(BasePermission):\n\tmessage = 'Not Authenticated'\n\n\tasync def has_permission(\n\t\tself: Self, source: Any, info: Info[Context], **kwargs: Any\n\t) -&gt; bool:\n\t\t\"\"\"\n\t\tstrawberry default function to see if user has permission.\n\n\t\tArgs:\n\t\t\t\tself (Self): Scope of current class\n\t\t\t\tsource (Any): Strawberry default field\n\t\t\t\tinfo (Info[Context]): Custom context class\n\t\t\t\tkwargs (Any): Strawberry default field\n\n\t\tReturns:\n\t\t\t\tbool: True if authentication is successful\n\n\t\t\"\"\"\n\t\trequest = info.context.request\n\n\t\tif 'Authorization' not in request.headers:\n\t\t\treturn False\n\n\t\ttry:\n\t\t\tif await info.context.user():\n\t\t\t\treturn True\n\t\texcept HTTPException as e:\n\t\t\tself.message = f'Not Authenticated - {e.detail}({e.__notes__})'\n\t\t\tresponse = info.context.response\n\n\t\t\tresponse.status_code = e.status_code\n\n\t\t\tif e.headers:\n\t\t\t\tfor k, v in e.headers.items():\n\t\t\t\t\tresponse.headers[k] = v\n\n\t\treturn False\n</code></pre>"},{"location":"api/auth/#api.auth.IsAuthenticated.has_permission","title":"<code>has_permission(source, info, **kwargs)</code>  <code>async</code>","text":"<p>strawberry default function to see if user has permission.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>Scope of current class</p> required <code>source</code> <code>Any</code> <p>Strawberry default field</p> required <code>info</code> <code>Info[Context]</code> <p>Custom context class</p> required <code>kwargs</code> <code>Any</code> <p>Strawberry default field</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if authentication is successful</p> Source code in <code>api/auth.py</code> <pre><code>async def has_permission(\n\tself: Self, source: Any, info: Info[Context], **kwargs: Any\n) -&gt; bool:\n\t\"\"\"\n\tstrawberry default function to see if user has permission.\n\n\tArgs:\n\t\t\tself (Self): Scope of current class\n\t\t\tsource (Any): Strawberry default field\n\t\t\tinfo (Info[Context]): Custom context class\n\t\t\tkwargs (Any): Strawberry default field\n\n\tReturns:\n\t\t\tbool: True if authentication is successful\n\n\t\"\"\"\n\trequest = info.context.request\n\n\tif 'Authorization' not in request.headers:\n\t\treturn False\n\n\ttry:\n\t\tif await info.context.user():\n\t\t\treturn True\n\texcept HTTPException as e:\n\t\tself.message = f'Not Authenticated - {e.detail}({e.__notes__})'\n\t\tresponse = info.context.response\n\n\t\tresponse.status_code = e.status_code\n\n\t\tif e.headers:\n\t\t\tfor k, v in e.headers.items():\n\t\t\t\tresponse.headers[k] = v\n\n\treturn False\n</code></pre>"},{"location":"api/auth/#api.auth.AuthExtension","title":"<code>api.auth.AuthExtension = PermissionExtension([IsAuthenticated()])</code>  <code>module-attribute</code>","text":""},{"location":"api/context/","title":"context","text":""},{"location":"api/context/#api.context.Context","title":"<code>api.context.Context</code>","text":"<p>               Bases: <code>BaseContext</code></p> Source code in <code>api/context.py</code> <pre><code>class Context(BaseContext):\n\trequest: Request | WebSocket\n\tbackground_tasks: BackgroundTasks\n\tresponse: Response\n\t_current_user: User | None\n\n\tdef __init__(self: Self, session: T_AsyncSession):\n\t\t\"\"\"Generate context database session.\"\"\"\n\t\tself.session = session\n\t\tself._current_user = None\n\n\tasync def user(self: Self) -&gt; User | None:\n\t\t\"\"\"\n\t\tGet database user based on jwt.\n\n\t\tArgs:\n\t\t\t\tself (Self): Scope of current class\n\n\t\tReturns:\n\t\t\t\tUser | None: User (db model) if exists\n\n\t\t\"\"\"\n\t\tif self._current_user:\n\t\t\treturn self._current_user\n\n\t\tif authorization := self.request.headers.get('Authorization', None):\n\t\t\tself._current_user = await get_current_user(self.session, authorization)\n\t\t\treturn self._current_user\n\n\t\treturn None\n</code></pre>"},{"location":"api/context/#api.context.Context.__init__","title":"<code>__init__(session)</code>","text":"<p>Generate context database session.</p> Source code in <code>api/context.py</code> <pre><code>def __init__(self: Self, session: T_AsyncSession):\n\t\"\"\"Generate context database session.\"\"\"\n\tself.session = session\n\tself._current_user = None\n</code></pre>"},{"location":"api/context/#api.context.Context.user","title":"<code>user()</code>  <code>async</code>","text":"<p>Get database user based on jwt.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>Scope of current class</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: User (db model) if exists</p> Source code in <code>api/context.py</code> <pre><code>async def user(self: Self) -&gt; User | None:\n\t\"\"\"\n\tGet database user based on jwt.\n\n\tArgs:\n\t\t\tself (Self): Scope of current class\n\n\tReturns:\n\t\t\tUser | None: User (db model) if exists\n\n\t\"\"\"\n\tif self._current_user:\n\t\treturn self._current_user\n\n\tif authorization := self.request.headers.get('Authorization', None):\n\t\tself._current_user = await get_current_user(self.session, authorization)\n\t\treturn self._current_user\n\n\treturn None\n</code></pre>"},{"location":"api/resolvers/","title":"resolvers","text":""},{"location":"api/resolvers/#api.resolvers.get_address","title":"<code>api.resolvers.get_address(session, filter, page_size, page_number)</code>  <code>async</code>","text":"<p>Get all addresses from database or all plugins.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>filter</code> <code>AddressFilterInput</code> <p>Strawberry input dataclass, everything can be None (based on sqlmodel model)</p> required <code>page_size</code> <code>PositiveInt</code> <p>How many elements in each page</p> required <code>page_number</code> <code>PositiveInt</code> <p>Number of the page</p> required <p>Returns:</p> Name Type Description <code>DictResponse</code> <code>DictResponse</code> <p>'data' key has all addresses (db model) based on filter or empty list; 'provider' key has the service provider local or some plugin</p> Source code in <code>api/resolvers.py</code> <pre><code>async def get_address(\n\tsession: AsyncSession,\n\tfilter: AddressFilterInput,\n\tpage_size: PositiveInt,\n\tpage_number: PositiveInt,\n) -&gt; DictResponse:\n\t\"\"\"\n\tGet all addresses from database or all plugins.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\tfilter (AddressFilterInput): Strawberry input dataclass,\n\t\t\t\t\teverything can be None (based on sqlmodel model)\n\t\t\tpage_size (PositiveInt): How many elements in each page\n\t\t\tpage_number (PositiveInt): Number of the page\n\n\tReturns:\n\t\t\tDictResponse: 'data' key has all addresses\n\t\t\t\t\t(db model) based on filter or empty list;\n\t\t\t\t\t'provider' key has the service provider local or some plugin\n\n\t\"\"\"\n\tresult = await BrazilRepository.get_address_by_dc_join_state_join_city(\n\t\tsession, filter, page_size, page_number\n\t)\n\tif result or not filter.zipcode:\n\t\treturn {'data': result, 'provider': 'local'}\n\n\treturn await get_zipcode_from_plugins(filter.zipcode)\n</code></pre>"},{"location":"api/resolvers/#api.resolvers.insert_address","title":"<code>api.resolvers.insert_address(session, address)</code>  <code>async</code>","text":"<p>Insert address and city if not exists on database.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>address</code> <code>AddressInsertInput</code> <p>Strict address class, all needed fields need to be passed</p> required <p>Returns:</p> Name Type Description <code>Address</code> <code>Address</code> <p>Address (db model)</p> Source code in <code>api/resolvers.py</code> <pre><code>async def insert_address(\n\tsession: AsyncSession, address: AddressInsertInput\n) -&gt; Address:\n\t\"\"\"\n\tInsert address and city if not exists on database.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\taddress (AddressInsertInput): Strict address class,\n\t\t\t\t\tall needed fields need to be passed\n\n\tReturns:\n\t\t\tAddress: Address (db model)\n\n\t\"\"\"\n\treturn await BrazilRepository.insert_address_by_dc(session, address)\n</code></pre>"},{"location":"api/schema/","title":"schema","text":""},{"location":"api/schema/#api.schema.Query","title":"<code>api.schema.Query</code>","text":"Source code in <code>api/schema.py</code> <pre><code>@type\nclass Query:\n\t@field(extensions=[AuthExtension])  # type: ignore[misc]\n\tasync def all_address(\n\t\tself: Self,\n\t\tinfo: Info[Context],\n\t\tfilter: AddressFilterInput,\n\t\tpage_size: PositiveInt = 10,\n\t\tpage_number: PositiveInt = 1,\n\t) -&gt; list[AddressType]:\n\t\t\"\"\"\n\t\tQuery all addresses from database or all plugins.\n\n\t\tArgs:\n\t\t\t\tinfo (Info): Strawberry default value to get context information\n\t\t\t\t\t\tin this case we use 'db'\n\t\t\t\tfilter (AddressFilterInput): Strawberry input dataclass,\n\t\t\t\t\t\teverything can be None (based on sqlmodel model)\n\t\t\t\tpage_size (PositiveInt, optional): How many elements in each page.\n\t\t\t\t\t\tDefaults to 10.\n\t\t\t\tpage_number (PositiveInt, optional): Number of the page. Defaults to 1.\n\n\t\tReturns:\n\t\t\t\tlist[AddressType]: All addresses (db model converted to strawberry type)\n\t\t\t\t\t\tbased on filter or empty list\n\n\t\t\"\"\"\n\t\tresult = await get_address(\n\t\t\tinfo.context.session, filter, page_size, page_number\n\t\t)\n\t\tif result['provider'] != 'local' and result['data']:\n\t\t\tinfo.context.background_tasks.add_task(\n\t\t\t\tinsert_address_background, info.context.session, result['data'][0]\n\t\t\t)\n\n\t\treturn list(\n\t\t\tmap(\n\t\t\t\tAddressType.from_pydantic,\n\t\t\t\tresult['data'],\n\t\t\t)\n\t\t)\n</code></pre>"},{"location":"api/schema/#api.schema.Query.all_address","title":"<code>all_address(info, filter, page_size=10, page_number=1)</code>  <code>async</code>","text":"<p>Query all addresses from database or all plugins.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>Info</code> <p>Strawberry default value to get context information in this case we use 'db'</p> required <code>filter</code> <code>AddressFilterInput</code> <p>Strawberry input dataclass, everything can be None (based on sqlmodel model)</p> required <code>page_size</code> <code>PositiveInt</code> <p>How many elements in each page. Defaults to 10.</p> <code>10</code> <code>page_number</code> <code>PositiveInt</code> <p>Number of the page. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>list[AddressType]</code> <p>list[AddressType]: All addresses (db model converted to strawberry type) based on filter or empty list</p> Source code in <code>api/schema.py</code> <pre><code>@field(extensions=[AuthExtension])  # type: ignore[misc]\nasync def all_address(\n\tself: Self,\n\tinfo: Info[Context],\n\tfilter: AddressFilterInput,\n\tpage_size: PositiveInt = 10,\n\tpage_number: PositiveInt = 1,\n) -&gt; list[AddressType]:\n\t\"\"\"\n\tQuery all addresses from database or all plugins.\n\n\tArgs:\n\t\t\tinfo (Info): Strawberry default value to get context information\n\t\t\t\t\tin this case we use 'db'\n\t\t\tfilter (AddressFilterInput): Strawberry input dataclass,\n\t\t\t\t\teverything can be None (based on sqlmodel model)\n\t\t\tpage_size (PositiveInt, optional): How many elements in each page.\n\t\t\t\t\tDefaults to 10.\n\t\t\tpage_number (PositiveInt, optional): Number of the page. Defaults to 1.\n\n\tReturns:\n\t\t\tlist[AddressType]: All addresses (db model converted to strawberry type)\n\t\t\t\t\tbased on filter or empty list\n\n\t\"\"\"\n\tresult = await get_address(\n\t\tinfo.context.session, filter, page_size, page_number\n\t)\n\tif result['provider'] != 'local' and result['data']:\n\t\tinfo.context.background_tasks.add_task(\n\t\t\tinsert_address_background, info.context.session, result['data'][0]\n\t\t)\n\n\treturn list(\n\t\tmap(\n\t\t\tAddressType.from_pydantic,\n\t\t\tresult['data'],\n\t\t)\n\t)\n</code></pre>"},{"location":"api/schema/#api.schema.Mutation","title":"<code>api.schema.Mutation</code>","text":"Source code in <code>api/schema.py</code> <pre><code>@type\nclass Mutation:\n\t@mutation(extensions=[AuthExtension])  # type: ignore[misc]\n\tasync def create_address(\n\t\tself: Self, info: Info[Context], address: AddressInsertInput\n\t) -&gt; AddressType:\n\t\t\"\"\"\n\t\tInsert address and city if not exists on database.\n\n\t\tArgs:\n\t\t\t\tinfo (Info[Context]): Strawberry default value to get context information\n\t\t\t\t\t\tin this case we use 'db'\n\t\t\t\taddress (AddressInsertInput): Strict address class,\n\t\t\t\t\t\talmost all fields need to be passed\n\n\t\tReturns:\n\t\t\t\tAddressType: Address (db model converted to strawberry dataclass)\n\n\t\t\"\"\"\n\t\treturn AddressType.from_pydantic(\n\t\t\tawait insert_address(info.context.session, address)\n\t\t)\n\n\t@mutation(extensions=[AuthExtension])  # type: ignore[misc]\n\tasync def refresh_token(self: Self, info: Info[Context]) -&gt; str | None:\n\t\t\"\"\"\n\t\tRefresh jwt token.\n\n\t\tArgs:\n\t\t\t\tself (Self): Scope of current class\n\t\t\t\tinfo (Info[Context]): Custom context, contains current user\n\n\t\tReturns:\n\t\t\t\tstr: jwt token\n\n\t\t\"\"\"\n\t\tif user := await info.context.user():\n\t\t\treturn await refresh_token_by_id(str(user.id))\n\t\treturn None\n\n\t@mutation\n\tasync def login(\n\t\tself: Self, info: Info[Context], login_data: LoginInput\n\t) -&gt; LoginType:\n\t\t\"\"\"\n\t\tAuthenticate user.\n\n\t\tArgs:\n\t\t\t\tself (Self): Scope of current class\n\t\t\t\tinfo (Info[Context]): Custom context, contains db session\n\t\t\t\tlogin_data (LoginInput): Username | Email and password\n\n\t\tReturns:\n\t\t\t\tLoginType: Authenticated Login\n\n\t\t\"\"\"\n\t\tuser = await authenticate_user(\n\t\t\tinfo.context.session, login_data.to_pydantic()\n\t\t)\n\t\tif not user or not verify_password(login_data.password, user.password):\n\t\t\tresponse = info.context.response\n\n\t\t\tresponse.status_code = HTTPStatus.UNAUTHORIZED\n\t\t\tresponse.headers['WWW-Authenticate'] = 'Bearer'\n\t\t\traise HTTPException(\n\t\t\t\tstatus_code=HTTPStatus.UNAUTHORIZED,\n\t\t\t\tdetail='Could not validate credentials',\n\t\t\t\theaders={'WWW-Authenticate': 'Bearer'},\n\t\t\t)\n\n\t\treturn LoginType.from_pydantic(user)\n\n\t@mutation\n\tasync def register(\n\t\tself: Self, info: Info[Context], register_data: UserRegisterInput\n\t) -&gt; LoginType:\n\t\t\"\"\"\n\t\tRegister user on database.\n\n\t\tArgs:\n\t\t\t\tinfo (Info[Context]): Scope of current class\n\t\t\t\tregister_data (UserRegisterInput): User data\n\n\t\tReturns:\n\t\t\t\tbool: True if succeed\n\n\t\t\"\"\"\n\t\treturn LoginType.from_pydantic(\n\t\t\tawait create_user(\n\t\t\t\tinfo.context.session, info.context.response, register_data\n\t\t\t)\n\t\t)\n</code></pre>"},{"location":"api/schema/#api.schema.Mutation.create_address","title":"<code>create_address(info, address)</code>  <code>async</code>","text":"<p>Insert address and city if not exists on database.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>Info[Context]</code> <p>Strawberry default value to get context information in this case we use 'db'</p> required <code>address</code> <code>AddressInsertInput</code> <p>Strict address class, almost all fields need to be passed</p> required <p>Returns:</p> Name Type Description <code>AddressType</code> <code>AddressType</code> <p>Address (db model converted to strawberry dataclass)</p> Source code in <code>api/schema.py</code> <pre><code>@mutation(extensions=[AuthExtension])  # type: ignore[misc]\nasync def create_address(\n\tself: Self, info: Info[Context], address: AddressInsertInput\n) -&gt; AddressType:\n\t\"\"\"\n\tInsert address and city if not exists on database.\n\n\tArgs:\n\t\t\tinfo (Info[Context]): Strawberry default value to get context information\n\t\t\t\t\tin this case we use 'db'\n\t\t\taddress (AddressInsertInput): Strict address class,\n\t\t\t\t\talmost all fields need to be passed\n\n\tReturns:\n\t\t\tAddressType: Address (db model converted to strawberry dataclass)\n\n\t\"\"\"\n\treturn AddressType.from_pydantic(\n\t\tawait insert_address(info.context.session, address)\n\t)\n</code></pre>"},{"location":"api/schema/#api.schema.Mutation.login","title":"<code>login(info, login_data)</code>  <code>async</code>","text":"<p>Authenticate user.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>Scope of current class</p> required <code>info</code> <code>Info[Context]</code> <p>Custom context, contains db session</p> required <code>login_data</code> <code>LoginInput</code> <p>Username | Email and password</p> required <p>Returns:</p> Name Type Description <code>LoginType</code> <code>LoginType</code> <p>Authenticated Login</p> Source code in <code>api/schema.py</code> <pre><code>@mutation\nasync def login(\n\tself: Self, info: Info[Context], login_data: LoginInput\n) -&gt; LoginType:\n\t\"\"\"\n\tAuthenticate user.\n\n\tArgs:\n\t\t\tself (Self): Scope of current class\n\t\t\tinfo (Info[Context]): Custom context, contains db session\n\t\t\tlogin_data (LoginInput): Username | Email and password\n\n\tReturns:\n\t\t\tLoginType: Authenticated Login\n\n\t\"\"\"\n\tuser = await authenticate_user(\n\t\tinfo.context.session, login_data.to_pydantic()\n\t)\n\tif not user or not verify_password(login_data.password, user.password):\n\t\tresponse = info.context.response\n\n\t\tresponse.status_code = HTTPStatus.UNAUTHORIZED\n\t\tresponse.headers['WWW-Authenticate'] = 'Bearer'\n\t\traise HTTPException(\n\t\t\tstatus_code=HTTPStatus.UNAUTHORIZED,\n\t\t\tdetail='Could not validate credentials',\n\t\t\theaders={'WWW-Authenticate': 'Bearer'},\n\t\t)\n\n\treturn LoginType.from_pydantic(user)\n</code></pre>"},{"location":"api/schema/#api.schema.Mutation.refresh_token","title":"<code>refresh_token(info)</code>  <code>async</code>","text":"<p>Refresh jwt token.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>Scope of current class</p> required <code>info</code> <code>Info[Context]</code> <p>Custom context, contains current user</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>jwt token</p> Source code in <code>api/schema.py</code> <pre><code>@mutation(extensions=[AuthExtension])  # type: ignore[misc]\nasync def refresh_token(self: Self, info: Info[Context]) -&gt; str | None:\n\t\"\"\"\n\tRefresh jwt token.\n\n\tArgs:\n\t\t\tself (Self): Scope of current class\n\t\t\tinfo (Info[Context]): Custom context, contains current user\n\n\tReturns:\n\t\t\tstr: jwt token\n\n\t\"\"\"\n\tif user := await info.context.user():\n\t\treturn await refresh_token_by_id(str(user.id))\n\treturn None\n</code></pre>"},{"location":"api/schema/#api.schema.Mutation.register","title":"<code>register(info, register_data)</code>  <code>async</code>","text":"<p>Register user on database.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>Info[Context]</code> <p>Scope of current class</p> required <code>register_data</code> <code>UserRegisterInput</code> <p>User data</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>LoginType</code> <p>True if succeed</p> Source code in <code>api/schema.py</code> <pre><code>@mutation\nasync def register(\n\tself: Self, info: Info[Context], register_data: UserRegisterInput\n) -&gt; LoginType:\n\t\"\"\"\n\tRegister user on database.\n\n\tArgs:\n\t\t\tinfo (Info[Context]): Scope of current class\n\t\t\tregister_data (UserRegisterInput): User data\n\n\tReturns:\n\t\t\tbool: True if succeed\n\n\t\"\"\"\n\treturn LoginType.from_pydantic(\n\t\tawait create_user(\n\t\t\tinfo.context.session, info.context.response, register_data\n\t\t)\n\t)\n</code></pre>"},{"location":"api/schema/#api.schema.schema","title":"<code>api.schema.schema = Schema(query=Query, mutation=Mutation)</code>  <code>module-attribute</code>","text":"<p>Create Graphql Router for fastapi and start graphql ide if env is DEV.</p>"},{"location":"api/schema/#api.schema.graphql_app","title":"<code>api.schema.graphql_app = GraphQLRouter[object, object](schema, context_getter=lambda context=Depends(Context): context, graphql_ide='graphiql' if settings.DEV else None)</code>  <code>module-attribute</code>","text":""},{"location":"api/security/","title":"security","text":""},{"location":"api/security/#api.security.get_password_hash","title":"<code>api.security.get_password_hash(password)</code>","text":"<p>Get a password hash.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Clear password.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hashed password.</p> Source code in <code>api/security.py</code> <pre><code>def get_password_hash(password: str) -&gt; str:\n\t\"\"\"\n\tGet a password hash.\n\n\tArgs:\n\t\t\tpassword (str): Clear password.\n\n\tReturns:\n\t\t\tstr: Hashed password.\n\n\t\"\"\"\n\treturn pwd_context.hash(password)\n</code></pre>"},{"location":"api/security/#api.security.verify_password","title":"<code>api.security.verify_password(plain_password, hashed_password)</code>","text":"<p>Verify password.</p> <p>Parameters:</p> Name Type Description Default <code>plain_password</code> <code>str</code> <p>Clear password.</p> required <code>hashed_password</code> <code>str</code> <p>Hashed password.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the passwords match, False if the passwords are not the same.</p> Source code in <code>api/security.py</code> <pre><code>def verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n\t\"\"\"\n\tVerify password.\n\n\tArgs:\n\t\t\tplain_password (str): Clear password.\n\t\t\thashed_password (str): Hashed password.\n\n\tReturns:\n\t\t\tbool: True if the passwords match, False if the passwords are not the same.\n\n\t\"\"\"\n\treturn pwd_context.verify(plain_password, hashed_password)\n</code></pre>"},{"location":"api/address/inputs/","title":"inputs","text":""},{"location":"api/address/inputs/#api.address.inputs.StateInput","title":"<code>api.address.inputs.StateInput</code>","text":"Source code in <code>api/address/inputs.py</code> <pre><code>@pydantic_input(StateBase)\nclass StateInput:\n\tacronym: auto\n\tname: auto\n</code></pre>"},{"location":"api/address/inputs/#api.address.inputs.CityInput","title":"<code>api.address.inputs.CityInput</code>","text":"Source code in <code>api/address/inputs.py</code> <pre><code>@pydantic_input(CityBase)\nclass CityInput:\n\tibge: auto\n\tname: auto\n\tddd: auto\n</code></pre>"},{"location":"api/address/inputs/#api.address.inputs.CoordinatesInput","title":"<code>api.address.inputs.CoordinatesInput</code>","text":"Source code in <code>api/address/inputs.py</code> <pre><code>@input\nclass CoordinatesInput:\n\tlatitude: float\n\tlongitude: float\n\taltitude: float | None = None\n</code></pre>"},{"location":"api/address/inputs/#api.address.inputs.AddressFilterInput","title":"<code>api.address.inputs.AddressFilterInput</code>","text":"Source code in <code>api/address/inputs.py</code> <pre><code>@pydantic_input(AddressBase)\nclass AddressFilterInput:\n\tzipcode: auto\n\tcity: CityInput | None = None\n\tstate: StateInput | None = None\n\tneighborhood: auto\n\tcomplement: auto\n\tcoordinates: CoordinatesInput | None = None\n</code></pre>"},{"location":"api/address/inputs/#api.address.inputs.AddressInsertInput","title":"<code>api.address.inputs.AddressInsertInput</code>","text":"Source code in <code>api/address/inputs.py</code> <pre><code>@pydantic_input(Address)\nclass AddressInsertInput:\n\tzipcode: auto\n\tstate: StateInput\n\tcity: CityInput\n\tneighborhood: auto\n\tcomplement: auto\n\tcoordinates: CoordinatesInput | None = None\n</code></pre>"},{"location":"api/address/types/","title":"types","text":""},{"location":"api/address/types/#api.address.types.StateType","title":"<code>api.address.types.StateType</code>","text":"Source code in <code>api/address/types.py</code> <pre><code>@pydantic_type(StateCreate, name='State')\nclass StateType:\n\tname: auto\n\tacronym: auto\n</code></pre>"},{"location":"api/address/types/#api.address.types.CityType","title":"<code>api.address.types.CityType</code>","text":"Source code in <code>api/address/types.py</code> <pre><code>@pydantic_type(CityCreate, name='City')\nclass CityType:\n\tibge: auto\n\tname: auto\n\tddd: auto\n</code></pre>"},{"location":"api/address/types/#api.address.types.AddressType","title":"<code>api.address.types.AddressType</code>","text":"Source code in <code>api/address/types.py</code> <pre><code>@pydantic_type(Address, name='Address')\nclass AddressType:\n\tzipcode: auto\n\tcity: CityType\n\tstate: StateType\n\tneighborhood: auto\n\tcomplement: auto\n\tcoordinates: JSON | None = None\n</code></pre>"},{"location":"api/address/types/#api.address.types.DictResponse","title":"<code>api.address.types.DictResponse</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>api/address/types.py</code> <pre><code>class DictResponse(TypedDict):\n\tdata: list[Address]\n\tprovider: str\n</code></pre>"},{"location":"api/jwt/jwt_manager/","title":"jwt_manager","text":""},{"location":"api/jwt/jwt_manager/#api.jwt.jwt_manager.get_current_user","title":"<code>api.jwt.jwt_manager.get_current_user(session, token)</code>  <code>async</code>","text":"<p>Get current user.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session.</p> required <code>token</code> <code>str</code> <p>JSON Web Token (JWT).</p> required <p>Raises:</p> Type Description <code>HTTPException</code> <p>When an invalid token is passed or the user does not exist</p> <p>Returns:</p> Name Type Description <code>User</code> <code>User</code> <p>Current user</p> Source code in <code>api/jwt/jwt_manager.py</code> <pre><code>async def get_current_user(\n\tsession: AsyncSession,\n\ttoken: str,\n) -&gt; User:\n\t\"\"\"\n\tGet current user.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session.\n\t\t\ttoken (str): JSON Web Token (JWT).\n\n\tRaises:\n\t\t\tHTTPException: When an invalid token is passed or the user does not exist\n\n\tReturns:\n\t\t\tUser: Current user\n\n\t\"\"\"\n\tcredentials_exception = HTTPException(\n\t\tstatus_code=HTTPStatus.UNAUTHORIZED,\n\t\tdetail='Could not validate credentials',\n\t\theaders={'WWW-Authenticate': 'Bearer'},\n\t)\n\n\ttry:\n\t\tpayload = decode(\n\t\t\ttoken, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM]\n\t\t)\n\n\t\tif not (user_id := payload.get('sub')):\n\t\t\tcredentials_exception.add_note('Sub not found')\n\t\t\traise credentials_exception\n\texcept (DecodeError, ExpiredSignatureError) as exc:\n\t\tcredentials_exception.add_note(exc.__class__.__name__)\n\t\traise credentials_exception from exc\n\n\tif user := await UserRepository.get_user_by_id(session, user_id):\n\t\treturn user\n\n\tcredentials_exception.add_note('User not found')\n\traise credentials_exception\n</code></pre>"},{"location":"api/jwt/jwt_manager/#api.jwt.jwt_manager.create_access_token","title":"<code>api.jwt.jwt_manager.create_access_token(data)</code>","text":"<p>Create access token.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>JWTClaim</code> <p>Claim data.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>JSON Web Token (JWT).</p> Source code in <code>api/jwt/jwt_manager.py</code> <pre><code>def create_access_token(data: JWTClaim) -&gt; str:\n\t\"\"\"\n\tCreate access token.\n\n\tArgs:\n\t\t\tdata (JWTClaim): Claim data.\n\n\tReturns:\n\t\t\tstr: JSON Web Token (JWT).\n\n\t\"\"\"\n\tto_encode = data.copy()\n\n\texpire = datetime.now(tz=ZoneInfo(settings.TIME_ZONE)) + timedelta(\n\t\tminutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES\n\t)\n\tto_encode |= {'exp': expire}\n\n\treturn encode(\n\t\tto_encode,  # type: ignore[arg-type]\n\t\tsettings.JWT_SECRET_KEY,\n\t\talgorithm=settings.JWT_ALGORITHM,\n\t)\n</code></pre>"},{"location":"api/jwt/jwt_type/","title":"jwt_type","text":""},{"location":"api/jwt/jwt_type/#api.jwt.jwt_type.JWTClaim","title":"<code>api.jwt.jwt_type.JWTClaim</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>JSON Web Token (JWT) Claim.</p> <p>.. _iana: https://www.iana.org/assignments/jwt/jwt.xhtml</p> Source code in <code>api/jwt/jwt_type.py</code> <pre><code>class JWTClaim(TypedDict, total=False):\n\t\"\"\"\n\tJSON Web Token (JWT) Claim.\n\n\t.. _iana: https://www.iana.org/assignments/jwt/jwt.xhtml\n\t\"\"\"\n\n\tsub: Annotated[Any, Doc('Subject.')]\n\tiss: Annotated[str, Doc('Issuer.')]\n\taud: Annotated[str, Doc('Audience.')]\n\texp: Annotated[datetime | int, Doc('Expiration Time.')]\n\tnbf: Annotated[datetime | int, Doc('Not Before.')]\n\tiat: Annotated[datetime | int, Doc('Issued At.')]\n\tjti: Annotated[str, Doc('JWT ID.')]\n\tname: Annotated[str, Doc('Full name.')]\n\tgiven_name: Annotated[str, Doc('Given name(s) or first name(s).')]\n\tfamily_name: Annotated[str, Doc('Surname(s) or last name(s).')]\n\tmiddle_name: Annotated[str, Doc('Middle name(s).')]\n\tnickname: Annotated[str, Doc('Casual name.')]\n\tpreferred_username: Annotated[\n\t\tstr,\n\t\tDoc('Shorthand name by which the End-User wishes to be referred to.'),\n\t]\n\tprofile: Annotated[str, Doc('Profile page URL.')]\n\tpicture: Annotated[str, Doc('Profile picture URL.')]\n\twebsite: Annotated[str, Doc('Web page or blog URL.')]\n\temail: Annotated[str, Doc('Preferred e-mail address.')]\n\temail_verified: Annotated[\n\t\tbool,\n\t\tDoc('True if the e-mail address has been verified; otherwise false.'),\n\t]\n\tgender: Annotated[str, Doc('Gender.')]\n\tbirthdate: Annotated[str, Doc('Birthday.')]\n\tzoneinfo: Annotated[str, Doc('Time zone.')]\n\tlocale: Annotated[str, Doc('Locale.')]\n\tphone_number: Annotated[str, Doc('Preferred telephone number.')]\n\tphone_number_verified: Annotated[\n\t\tbool,\n\t\tDoc('True if the phone number has been verified; otherwise false.'),\n\t]\n\taddress: Annotated[str, Doc('Preferred postal address.')]\n\tupdated_at: Annotated[str, Doc('Time the information was last updated.')]\n\tazp: Annotated[\n\t\tstr,\n\t\tDoc('Authorized party - the party to which the ID Token was issued.'),\n\t]\n\tnonce: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Value used to associate a Client session with an ID Token\n            (MAY also be used for nonce values in other applications of JWTs).\n            \"\"\"\n\t\t),\n\t]\n\tauth_time: Annotated[str, Doc('Time when the authentication occurred.')]\n\tat_hash: Annotated[str, Doc('Access Token hash value.')]\n\tc_hash: Annotated[str, Doc('Code hash value.')]\n\tacr: Annotated[str, Doc('Authentication Context Class Reference.')]\n\tamr: Annotated[str, Doc('Authentication Methods References.')]\n\tsub_jwk: Annotated[\n\t\tstr,\n\t\tDoc('Public key used to check the signature of an ID Token.'),\n\t]\n\tcnf: Annotated[str, Doc('Confirmation.')]\n\tsip_from_tag: Annotated[\n\t\tstr, Doc('SIP From tag header field parameter value.')\n\t]\n\tsip_date: Annotated[str, Doc('SIP Date header field value.')]\n\tsip_callid: Annotated[str, Doc('SIP Call-Id header field value.')]\n\tsip_cseq_num: Annotated[\n\t\tstr, Doc('SIP CSeq numeric header field parameter value.')\n\t]\n\tsip_via_branch: Annotated[\n\t\tstr, Doc('SIP Via branch header field parameter value.')\n\t]\n\torig: Annotated[str, Doc('Originating Identity String.')]\n\tdest: Annotated[str, Doc('Destination Identity String.')]\n\tmky: Annotated[str, Doc('Media Key Fingerprint String.')]\n\tevents: Annotated[str, Doc('Security Events.')]\n\ttoe: Annotated[str, Doc('Time of Event.')]\n\ttxn: Annotated[str, Doc('Transaction Identifier.')]\n\trph: Annotated[str, Doc('Resource Priority Header Authorization.')]\n\tsid: Annotated[str, Doc('Session ID.')]\n\tvot: Annotated[str, Doc('Vector of Trust value.')]\n\tvtm: Annotated[str, Doc('Vector of Trust trustmark URL.')]\n\tattest: Annotated[\n\t\tstr, Doc('Attestation level as defined in SHAKEN framework.')\n\t]\n\torigid: Annotated[\n\t\tstr,\n\t\tDoc('Originating Identifier as defined in SHAKEN framework.'),\n\t]\n\tact: Annotated[str, Doc('Actor')]\n\tscope: Annotated[str, Doc('Scope Values')]\n\tclient_id: Annotated[str, Doc('Client Identifier')]\n\tmay_act: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Authorized Actor - the party that is authorized to become the\n            actor.\n            \"\"\"\n\t\t),\n\t]\n\tjcard: Annotated[str, Doc('jCard data.')]\n\tat_use_nbr: Annotated[\n\t\tstr,\n\t\tDoc('Number of API requests for which the access token can be used.'),\n\t]\n\tdiv: Annotated[str, Doc('Diverted Target of a Call.')]\n\topt: Annotated[str, Doc('Original PASSporT (in Full Form).')]\n\tvc: Annotated[\n\t\tstr,\n\t\tDoc('Verifiable Credential as specified in the W3C Recommendation.'),\n\t]\n\tvp: Annotated[\n\t\tstr,\n\t\tDoc('Verifiable Presentation as specified in the W3C Recommendation.'),\n\t]\n\tsph: Annotated[str, Doc('SIP Priority header field.')]\n\tace_profile: Annotated[\n\t\tstr,\n\t\tDoc('The ACE profile a token is supposed to be used with.'),\n\t]\n\tcnonce: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            \"client-nonce\". A nonce previously provided to the AS by the RS\n            via the client. Used to verify token freshness when the RS cannot\n            synchronize its clock with the AS.'\n            \"\"\"\n\t\t),\n\t]\n\texi: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            \"Expires in\". Lifetime of the token in seconds from the time the\n            RS first sees it. Used to implement a weaker from of token\n            expiration for devices that cannot synchronize their internal\n            clocks.\n            \"\"\"\n\t\t),\n\t]\n\troles: Annotated[str, Doc('Roles.')]\n\tgroups: Annotated[str, Doc('Groups.')]\n\tentitlements: Annotated[str, Doc('Entitlements;')]\n\ttoken_introspection: Annotated[str, Doc('Token introspection response.')]\n\teat_nonce: Annotated[str, Doc('Nonce.')]\n\tueid: Annotated[str, Doc('The Universal Entity ID.')]\n\tsueids: Annotated[str, Doc('Semi-permanent UEIDs.')]\n\toemid: Annotated[str, Doc('Hardware OEM ID.')]\n\thwmodel: Annotated[str, Doc('Model identifier for hardware.')]\n\thwversion: Annotated[str, Doc('Hardware Version Identifier.')]\n\toemboot: Annotated[\n\t\tstr,\n\t\tDoc('Indicates whether the software booted was OEM authorized.'),\n\t]\n\tdbgstat: Annotated[str, Doc('Indicates status of debug facilities.')]\n\tlocation: Annotated[str, Doc('The geographic location.')]\n\teat_profile: Annotated[str, Doc('Indicates the EAT profile followed.')]\n\tsubmods: Annotated[str, Doc('The section containing submodules.')]\n\tuptime: Annotated[str, Doc('Uptime.')]\n\tbootcount: Annotated[\n\t\tstr,\n\t\tDoc('The number times the entity or submodule has been booted.'),\n\t]\n\tbootseed: Annotated[str, Doc('Identifies a boot cycle.')]\n\tdloas: Annotated[\n\t\tstr,\n\t\tDoc('Certifications received as Digital Letters of Approval.'),\n\t]\n\tswname: Annotated[str, Doc('The name of the software running in the entity.')]\n\tswversion: Annotated[\n\t\tstr, Doc('The version of software running in the entity.')\n\t]\n\tmanifests: Annotated[\n\t\tstr,\n\t\tDoc('Manifests describing the software installed on the entity.'),\n\t]\n\tmeasurements: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Measurements of the software, memory configuration and such on the\n            entity.\n            \"\"\"\n\t\t),\n\t]\n\tmeasres: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            The results of comparing software measurements to reference values.\n            \"\"\"\n\t\t),\n\t]\n\tintuse: Annotated[str, Doc('Indicates intended use of the EAT.')]\n\tcdniv: Annotated[str, Doc('CDNI Claim Set Version.')]\n\tcdnicrit: Annotated[str, Doc('CDNI Critical Claims Set.')]\n\tcdniip: Annotated[str, Doc('CDNI IP Address.')]\n\tcdniuc: Annotated[str, Doc('CDNI URI Containe.')]\n\tcdniets: Annotated[\n\t\tstr,\n\t\tDoc('CDNI Expiration Time Setting for Signed Token Renewal.'),\n\t]\n\tcdnistt: Annotated[\n\t\tstr,\n\t\tDoc('CDNI Signed Token Transport Method for Signed Token Renewal.'),\n\t]\n\tcdnistd: Annotated[str, Doc('CDNI Signed Token Depth.')]\n\tsig_val_claims: Annotated[str, Doc('Signature Validation Token.')]\n\tauthorization_details: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            The claim authorization_details contains a JSON array of JSON\n            objects representing the rights of the access token. Each JSON\n            object contains the data to specify the authorization requirements\n            for a certain type of resource.\n            \"\"\"\n\t\t),\n\t]\n\tverified_claims: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            This container Claim is composed of the verification evidence\n            related to a certain verification process and the corresponding\n            Claims about the End-User which were verified in this process.\n            \"\"\"\n\t\t),\n\t]\n\tplace_of_birth: Annotated[\n\t\tstr,\n\t\tDoc('A structured Claim representing the End-Users place of birth.'),\n\t]\n\tnationalities: Annotated[\n\t\tstr,\n\t\tDoc('String array representing the End-Users nationalities.'),\n\t]\n\tbirth_family_name: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Family name(s) someone has when they were born, or at least from\n            the time they were a child. This term can be used by a person who\n            changes the family name(s) later in life for any reason. Note that\n            in some cultures, people can have multiple family names or no\n            family name; all can be present, with the names being separated by\n            space characters.\n            \"\"\"\n\t\t),\n\t]\n\tbirth_given_name: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Given name(s) someone has when they were born, or at least from\n            the time they were a child. This term can be used by a person who\n            changes the given name later in life for any reason. Note that in\n            some cultures, people can have multiple given names; all can be\n            present, with the names being separated by space characters.\n            \"\"\"\n\t\t),\n\t]\n\tbirth_middle_name: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Middle name(s) someone has when they were born, or at least from\n            the time they were a child. This term can be used by a person who\n            changes the middle name later in life for any reason.\n            Note that in some cultures, people can have multiple middle names;\n            all can be present, with the names being separated by space\n            characters. Also note that in some cultures, middle names are not\n            used.\n            \"\"\"\n\t\t),\n\t]\n\tsalutation: Annotated[str, Doc('End-Users salutation, e.g., \"Mr.\".')]\n\ttitle: Annotated[str, Doc('End-Users title, e.g., \"Dr.\"')]\n\tmsisdn: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            End-Users mobile phone number formatted according to ITU-T\n            recommendation.\n            \"\"\"\n\t\t),\n\t]\n\talso_known_as: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            Stage name, religious name or any other type of alias/pseudonym\n            with which a person is known in a specific context besides its\n            legal name. This must be part of the applicable legislation and\n            thus the trust framework (e.g., be an attribute on the identity\n            card).\n            \"\"\"\n\t\t),\n\t]\n\thtm: Annotated[str, Doc('The HTTP method of the request')]\n\thtu: Annotated[\n\t\tstr,\n\t\tDoc('The HTTP URI of the request (without query and fragment parts).'),\n\t]\n\tath: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            The base64url-encoded SHA-256 hash of the ASCII encoding of the\n            associated access tokens value.\n            \"\"\"\n\t\t),\n\t]\n\tatc: Annotated[str, Doc('Authority Token Challenge.')]\n\tsub_id: Annotated[str, Doc('Subject Identifier.')]\n\trcd: Annotated[str, Doc('Rich Call Data Information.')]\n\trcdi: Annotated[str, Doc('Rich Call Data Integrity Information.')]\n\tcrn: Annotated[str, Doc('Call Reason.')]\n\tmsgi: Annotated[str, Doc('Message Integrity Information.')]\n\t_claim_names: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            JSON object whose member names are the Claim Names for the\n            Aggregated and Distributed Claims.\n            \"\"\"\n\t\t),\n\t]\n\t_claim_sources: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            JSON object whose member names are referenced by the member values\n            of the _claim_names member.\n            \"\"\"\n\t\t),\n\t]\n\trdap_allowed_purposes: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            This claim describes the set of RDAP query purposes that are\n            available to an identity that is presented for access to a\n            protected RDAP resource.\n            \"\"\"\n\t\t),\n\t]\n\trdap_dnt_allowed: Annotated[\n\t\tstr,\n\t\tDoc(\n\t\t\t\"\"\"\n            This claim contains a JSON boolean literal that describes a\n            \"do not track\" request for server-side tracking, logging, or\n            recording of an identity that is presented for access to a\n            protected RDAP resource.\n            \"\"\"\n\t\t),\n\t]\n\tgeohash: Annotated[str, Doc('Geohash String or Array.')]\n</code></pre>"},{"location":"api/user/inputs/","title":"inputs","text":""},{"location":"api/user/inputs/#api.user.inputs.UserRegisterInput","title":"<code>api.user.inputs.UserRegisterInput</code>","text":"Source code in <code>api/user/inputs.py</code> <pre><code>@pydantic_input(User)\nclass UserRegisterInput:\n\temail: auto\n\tusername: auto\n\tpassword: auto\n</code></pre>"},{"location":"api/user/inputs/#api.user.inputs.LoginInput","title":"<code>api.user.inputs.LoginInput</code>","text":"Source code in <code>api/user/inputs.py</code> <pre><code>@pydantic_input(UserLogin)\nclass LoginInput:\n\temail: auto\n\tusername: auto\n\tpassword: auto\n</code></pre>"},{"location":"api/user/types/","title":"types","text":""},{"location":"api/user/types/#api.user.types.LoginType","title":"<code>api.user.types.LoginType</code>","text":"Source code in <code>api/user/types.py</code> <pre><code>@pydantic_type(User)\nclass LoginType:\n\tid: auto\n\temail: auto\n\tusername: auto\n\n\t@field\n\tdef jwt(self: Self) -&gt; str:\n\t\t\"\"\"\n\t\tGenerate jwt token based on current id.\n\n\t\tArgs:\n\t\t\t\tself (Self): Scope of current class\n\n\t\tReturns:\n\t\t\t\tstr: Jwt token\n\n\t\t\"\"\"\n\t\treturn create_access_token({'sub': str(self.id)})\n</code></pre>"},{"location":"api/user/types/#api.user.types.LoginType.jwt","title":"<code>jwt()</code>","text":"<p>Generate jwt token based on current id.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>Scope of current class</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Jwt token</p> Source code in <code>api/user/types.py</code> <pre><code>@field\ndef jwt(self: Self) -&gt; str:\n\t\"\"\"\n\tGenerate jwt token based on current id.\n\n\tArgs:\n\t\t\tself (Self): Scope of current class\n\n\tReturns:\n\t\t\tstr: Jwt token\n\n\t\"\"\"\n\treturn create_access_token({'sub': str(self.id)})\n</code></pre>"},{"location":"database/engine/","title":"engine","text":""},{"location":"database/engine/#database.engine.engine","title":"<code>database.engine.engine = create_async_engine(settings.DATABASE_URL, echo=settings.DEV, future=True, pool_size=20, max_overflow=20, pool_recycle=3600)</code>  <code>module-attribute</code>","text":""},{"location":"database/engine/#database.engine.get_session","title":"<code>database.engine.get_session()</code>  <code>async</code>","text":"<p>Create and yield database async session.</p> Source code in <code>database/engine.py</code> <pre><code>async def get_session() -&gt; (\n\tAsyncGenerator[AsyncSession, None]\n):  # pragma: no cover\n\t\"\"\"Create and yield database async session.\"\"\"\n\tasync with AsyncSession(engine, expire_on_commit=False) as session:\n\t\tyield session\n</code></pre>"},{"location":"database/engine/#database.engine.T_AsyncSession","title":"<code>database.engine.T_AsyncSession = Annotated[AsyncSession, Depends(get_session)]</code>  <code>module-attribute</code>","text":""},{"location":"database/migrations/","title":"migrations","text":"<p>Todo</p>"},{"location":"database/migrations/#auto-build-this-page-based-on-databasemigrations-folder-for-example","title":"Auto build this page based on database/migrations folder, for example:","text":""},{"location":"database/migrations/#migration-revision-id","title":"Migration {revision id}","text":"<p>down_revision branch_labels depends_on</p>"},{"location":"database/migrations/#database.migrations.versions.e5e1bdc106c3_create_state_city_and_address_tables.upgrade","title":"<code>database.migrations.versions.e5e1bdc106c3_create_state_city_and_address_tables.upgrade()</code>","text":"<p>Create State, City and Address tables.</p> Source code in <code>database/migrations/versions/e5e1bdc106c3_create_state_city_and_address_tables.py</code> <pre><code>def upgrade() -&gt; None:\n\t\"\"\"Create State, City and Address tables.\"\"\"\n\top.create_table(\n\t\t'cities',\n\t\tsa.Column('id', sa.Uuid(), nullable=False),\n\t\tsa.Column('ibge', sa.Integer(), nullable=False),\n\t\tsa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n\t\tsa.Column('ddd', sa.Integer(), nullable=True),\n\t\tsa.PrimaryKeyConstraint('id'),\n\t)\n\top.create_index(op.f('ix_cities_ibge'), 'cities', ['ibge'], unique=True)\n\top.create_table(\n\t\t'states',\n\t\tsa.Column('id', sa.Uuid(), nullable=False),\n\t\tsa.Column(\n\t\t\t'acronym',\n\t\t\tsa.Enum(\n\t\t\t\t'AC',\n\t\t\t\t'AL',\n\t\t\t\t'AP',\n\t\t\t\t'AM',\n\t\t\t\t'BA',\n\t\t\t\t'CE',\n\t\t\t\t'DF',\n\t\t\t\t'ES',\n\t\t\t\t'GO',\n\t\t\t\t'MA',\n\t\t\t\t'MT',\n\t\t\t\t'MS',\n\t\t\t\t'MG',\n\t\t\t\t'PA',\n\t\t\t\t'PB',\n\t\t\t\t'PR',\n\t\t\t\t'PE',\n\t\t\t\t'PI',\n\t\t\t\t'RJ',\n\t\t\t\t'RN',\n\t\t\t\t'RS',\n\t\t\t\t'RO',\n\t\t\t\t'RR',\n\t\t\t\t'SC',\n\t\t\t\t'SP',\n\t\t\t\t'SE',\n\t\t\t\t'TO',\n\t\t\t\tname='stateacronym',\n\t\t\t),\n\t\t\tnullable=False,\n\t\t),\n\t\tsa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n\t\tsa.PrimaryKeyConstraint('id'),\n\t)\n\top.create_index(op.f('ix_states_acronym'), 'states', ['acronym'], unique=True)\n\top.create_table(\n\t\t'addresses',\n\t\tsa.Column('id', sa.Uuid(), nullable=False),\n\t\tsa.Column('zipcode', sa.Integer(), nullable=False),\n\t\tsa.Column('state_id', sa.Uuid(), nullable=False),\n\t\tsa.Column('city_id', sa.Uuid(), nullable=False),\n\t\tsa.Column(\n\t\t\t'neighborhood', sqlmodel.sql.sqltypes.AutoString(), nullable=False\n\t\t),\n\t\tsa.Column('complement', sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n\t\tsa.Column(\n\t\t\t'coordinates',\n\t\t\tpostgresql.JSONB(astext_type=sa.Text()),  # type: ignore[no-untyped-call]\n\t\t\tnullable=True,\n\t\t),\n\t\tsa.Column('updated_at', sa.DateTime(), nullable=False),\n\t\tsa.ForeignKeyConstraint(\n\t\t\t['city_id'],\n\t\t\t['cities.id'],\n\t\t),\n\t\tsa.ForeignKeyConstraint(\n\t\t\t['state_id'],\n\t\t\t['states.id'],\n\t\t),\n\t\tsa.PrimaryKeyConstraint('id'),\n\t)\n\top.create_index(\n\t\top.f('ix_addresses_zipcode'), 'addresses', ['zipcode'], unique=True\n\t)\n</code></pre>"},{"location":"database/migrations/#database.migrations.versions.e5e1bdc106c3_create_state_city_and_address_tables.downgrade","title":"<code>database.migrations.versions.e5e1bdc106c3_create_state_city_and_address_tables.downgrade()</code>","text":"<p>Drop address, state and city tables.</p> Source code in <code>database/migrations/versions/e5e1bdc106c3_create_state_city_and_address_tables.py</code> <pre><code>def downgrade() -&gt; None:\n\t\"\"\"Drop address, state and city tables.\"\"\"\n\top.drop_index(op.f('ix_addresses_zipcode'), table_name='addresses')\n\top.drop_index(op.f('ix_states_acronym'), table_name='states')\n\top.drop_index(op.f('ix_cities_ibge'), table_name='cities')\n\top.drop_table('addresses')\n\top.drop_table('states')\n\top.drop_table('cities')\n\top.execute('DROP TYPE public.stateacronym')\n</code></pre>"},{"location":"database/migrations/#database.migrations.versions.16486dde779e_data_seed_populate_state.upgrade","title":"<code>database.migrations.versions.16486dde779e_data_seed_populate_state.upgrade()</code>","text":"<p>Insert all 27 states.</p> Source code in <code>database/migrations/versions/16486dde779e_data_seed_populate_state.py</code> <pre><code>def upgrade() -&gt; None:\n\t\"\"\"Insert all 27 states.\"\"\"\n\top.bulk_insert(\n\t\tState.__table__,  # type: ignore[attr-defined]\n\t\t[\n\t\t\t{'id': uuid4(), 'acronym': 'AC', 'name': 'Acre'},\n\t\t\t{'id': uuid4(), 'acronym': 'AL', 'name': 'Alagoas'},\n\t\t\t{'id': uuid4(), 'acronym': 'AP', 'name': 'Amap\u00e1'},\n\t\t\t{'id': uuid4(), 'acronym': 'AM', 'name': 'Amazonas'},\n\t\t\t{'id': uuid4(), 'acronym': 'BA', 'name': 'Bahia'},\n\t\t\t{'id': uuid4(), 'acronym': 'CE', 'name': 'Cear\u00e1'},\n\t\t\t{'id': uuid4(), 'acronym': 'DF', 'name': 'Distrito Federal'},\n\t\t\t{'id': uuid4(), 'acronym': 'ES', 'name': 'Esp\u00edrito Santo'},\n\t\t\t{'id': uuid4(), 'acronym': 'GO', 'name': 'Goi\u00e1s'},\n\t\t\t{'id': uuid4(), 'acronym': 'MA', 'name': 'Maranh\u00e3o'},\n\t\t\t{'id': uuid4(), 'acronym': 'MT', 'name': 'Mato Grosso'},\n\t\t\t{'id': uuid4(), 'acronym': 'MS', 'name': 'Mato Grosso do Sul'},\n\t\t\t{'id': uuid4(), 'acronym': 'MG', 'name': 'Minas Gerais'},\n\t\t\t{'id': uuid4(), 'acronym': 'PA', 'name': 'Par\u00e1'},\n\t\t\t{'id': uuid4(), 'acronym': 'PB', 'name': 'Para\u00edba'},\n\t\t\t{'id': uuid4(), 'acronym': 'PR', 'name': 'Paran\u00e1'},\n\t\t\t{'id': uuid4(), 'acronym': 'PE', 'name': 'Pernambuco'},\n\t\t\t{'id': uuid4(), 'acronym': 'PI', 'name': 'Piau\u00ed'},\n\t\t\t{'id': uuid4(), 'acronym': 'RJ', 'name': 'Rio de Janeiro'},\n\t\t\t{'id': uuid4(), 'acronym': 'RN', 'name': 'Rio Grande do Norte'},\n\t\t\t{'id': uuid4(), 'acronym': 'RS', 'name': 'Rio Grande do Sul'},\n\t\t\t{'id': uuid4(), 'acronym': 'RO', 'name': 'Rond\u00f4nia'},\n\t\t\t{'id': uuid4(), 'acronym': 'RR', 'name': 'Roraima'},\n\t\t\t{'id': uuid4(), 'acronym': 'SC', 'name': 'Santa Catarina'},\n\t\t\t{'id': uuid4(), 'acronym': 'SP', 'name': 'S\u00e3o Paulo'},\n\t\t\t{'id': uuid4(), 'acronym': 'SE', 'name': 'Sergipe'},\n\t\t\t{'id': uuid4(), 'acronym': 'TO', 'name': 'Tocantins'},\n\t\t],\n\t)\n</code></pre>"},{"location":"database/migrations/#database.migrations.versions.16486dde779e_data_seed_populate_state.downgrade","title":"<code>database.migrations.versions.16486dde779e_data_seed_populate_state.downgrade()</code>","text":"<p>Remove all 27 states.</p> Source code in <code>database/migrations/versions/16486dde779e_data_seed_populate_state.py</code> <pre><code>def downgrade() -&gt; None:\n\t\"\"\"Remove all 27 states.\"\"\"\n\tstates = (\n\t\t\"'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', \"\n\t\t\"'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', \"\n\t\t\"'RR', 'SC', 'SP', 'SE', 'TO'\"\n\t)\n\top.execute(f'DELETE FROM states WHERE acronym in ({states})')\n</code></pre>"},{"location":"database/models/brazil/","title":"brazil","text":""},{"location":"database/models/brazil/#database.models.brazil.StateAcronym","title":"<code>database.models.brazil.StateAcronym</code>","text":"<p>               Bases: <code>StrEnum</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>@enum\nclass StateAcronym(StrEnum):\n\tAC = 'AC'\n\tAL = 'AL'\n\tAP = 'AP'\n\tAM = 'AM'\n\tBA = 'BA'\n\tCE = 'CE'\n\tDF = 'DF'\n\tES = 'ES'\n\tGO = 'GO'\n\tMA = 'MA'\n\tMT = 'MT'\n\tMS = 'MS'\n\tMG = 'MG'\n\tPA = 'PA'\n\tPB = 'PB'\n\tPR = 'PR'\n\tPE = 'PE'\n\tPI = 'PI'\n\tRJ = 'RJ'\n\tRN = 'RN'\n\tRS = 'RS'\n\tRO = 'RO'\n\tRR = 'RR'\n\tSC = 'SC'\n\tSP = 'SP'\n\tSE = 'SE'\n\tTO = 'TO'\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.StateAcronymName","title":"<code>database.models.brazil.StateAcronymName</code>","text":"<p>               Bases: <code>StrEnum</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class StateAcronymName(StrEnum):\n\tAC = 'Acre'\n\tAL = 'Alagoas'\n\tAP = 'Amap\u00e1'\n\tAM = 'Amazonas'\n\tBA = 'Bahia'\n\tCE = 'Cear\u00e1'\n\tDF = 'Distrito Federal'\n\tES = 'Esp\u00edrito Santo'\n\tGO = 'Goi\u00e1s'\n\tMA = 'Maranh\u00e3o'\n\tMT = 'Mato Grosso'\n\tMS = 'Mato Grosso do Sul'\n\tMG = 'Minas Gerais'\n\tPA = 'Par\u00e1'\n\tPB = 'Para\u00edba'\n\tPR = 'Paran\u00e1'\n\tPE = 'Pernambuco'\n\tPI = 'Piau\u00ed'\n\tRJ = 'Rio de Janeiro'\n\tRN = 'Rio Grande do Norte'\n\tRS = 'Rio Grande do Sul'\n\tRO = 'Rond\u00f4nia'\n\tRR = 'Roraima'\n\tSC = 'Santa Catarina'\n\tSP = 'S\u00e3o Paulo'\n\tSE = 'Sergipe'\n\tTO = 'Tocantins'\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.StateBase","title":"<code>database.models.brazil.StateBase</code>","text":"<p>               Bases: <code>SQLModel</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class StateBase(SQLModel):\n\tacronym: StateAcronym = Field(\n\t\tunique=True,\n\t\tindex=True,\n\t)\n\tname: str | None\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.StateCreate","title":"<code>database.models.brazil.StateCreate</code>","text":"<p>               Bases: <code>StateBase</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class StateCreate(StateBase):\n\tname: str\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.State","title":"<code>database.models.brazil.State</code>","text":"<p>               Bases: <code>StateCreate</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class State(StateCreate, table=True):\n\t__tablename__ = 'states'\n\n\tid: UUID4 | None = Field(default_factory=uuid4, primary_key=True)\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.CityBase","title":"<code>database.models.brazil.CityBase</code>","text":"<p>               Bases: <code>SQLModel</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class CityBase(SQLModel):\n\tibge: PositiveInt = Field(\n\t\tunique=True,\n\t\tindex=True,\n\t)\n\tname: str | None\n\tddd: int | None = None\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.CityCreate","title":"<code>database.models.brazil.CityCreate</code>","text":"<p>               Bases: <code>CityBase</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class CityCreate(CityBase):\n\tname: str\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.City","title":"<code>database.models.brazil.City</code>","text":"<p>               Bases: <code>CityCreate</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class City(CityCreate, table=True):\n\t__tablename__ = 'cities'\n\n\tid: UUID4 | None = Field(default_factory=uuid4, primary_key=True)\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.Coordinates","title":"<code>database.models.brazil.Coordinates</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class Coordinates(TypedDict):\n\tlatitude: float\n\tlongitude: float\n\taltitude: float | None\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.AddressBase","title":"<code>database.models.brazil.AddressBase</code>","text":"<p>               Bases: <code>SQLModel</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class AddressBase(SQLModel):\n\tzipcode: int | None = Field(None, gt=1_000_000, lt=99_999_999)\n\tneighborhood: str | None = None\n\tcomplement: str | None = None\n\tcoordinates: Coordinates | None = None\n</code></pre>"},{"location":"database/models/brazil/#database.models.brazil.Address","title":"<code>database.models.brazil.Address</code>","text":"<p>               Bases: <code>AddressBase</code></p> Source code in <code>database/models/brazil.py</code> <pre><code>class Address(AddressBase, table=True):\n\t__tablename__ = 'addresses'\n\n\tid: UUID4 = Field(default_factory=uuid4, primary_key=True)\n\n\tzipcode: int = Field(unique=True, index=True, gt=1_000_000, lt=99_999_999)\n\n\tstate_id: UUID4 = Field(foreign_key='states.id')\n\tstate: State = Relationship(sa_relationship_kwargs={'lazy': 'selectin'})\n\n\tcity_id: UUID4 = Field(foreign_key='cities.id')\n\tcity: City = Relationship(sa_relationship_kwargs={'lazy': 'selectin'})\n\n\tneighborhood: str\n\tcomplement: str | None = None\n\tcoordinates: Coordinates | None = Field(None, nullable=True, sa_type=JSONB)\n\n\tupdated_at: datetime | None = Field(\n\t\tdefault_factory=datetime.now,\n\t\tnullable=False,\n\t\tsa_column_kwargs={\n\t\t\t'onupdate': datetime.now,\n\t\t},\n\t)\n</code></pre>"},{"location":"database/models/user/","title":"user","text":""},{"location":"database/models/user/#database.models.user.UserBase","title":"<code>database.models.user.UserBase</code>","text":"<p>               Bases: <code>SQLModel</code></p> Source code in <code>database/models/user.py</code> <pre><code>class UserBase(SQLModel):\n\temail: EmailStr | None = None\n\tusername: str | None = None\n</code></pre>"},{"location":"database/models/user/#database.models.user.UserLogin","title":"<code>database.models.user.UserLogin</code>","text":"<p>               Bases: <code>UserBase</code></p> Source code in <code>database/models/user.py</code> <pre><code>class UserLogin(UserBase):\n\temail: EmailStr | None = None\n\tusername: str | None = None\n\tpassword: str\n\n\t@model_validator(mode='before')\n\t@classmethod\n\tdef verificar_atributos(\n\t\tcls, values: dict[str, str | None]\n\t) -&gt; dict[str, str | None]:\n\t\t\"\"\"\n\t\tCheck if email or username have any value.\n\n\t\tArgs:\n\t\t\t\tvalues (dict[str, str  |  None]): dict of attributes in the class\n\n\t\tRaises:\n\t\t\t\tValueError: if email and username are None\n\n\t\tReturns:\n\t\t\t\tdict[str, str | None]: decame dict of attributes in the class\n\n\t\t\"\"\"\n\t\tif not values.get('email') and not values.get('username'):\n\t\t\traise ValueError('User MUST have one of the attributes user or email')\n\t\treturn values\n</code></pre>"},{"location":"database/models/user/#database.models.user.UserLogin.verificar_atributos","title":"<code>verificar_atributos(values)</code>  <code>classmethod</code>","text":"<p>Check if email or username have any value.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, str | None]</code> <p>dict of attributes in the class</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if email and username are None</p> <p>Returns:</p> Type Description <code>dict[str, str | None]</code> <p>dict[str, str | None]: decame dict of attributes in the class</p> Source code in <code>database/models/user.py</code> <pre><code>@model_validator(mode='before')\n@classmethod\ndef verificar_atributos(\n\tcls, values: dict[str, str | None]\n) -&gt; dict[str, str | None]:\n\t\"\"\"\n\tCheck if email or username have any value.\n\n\tArgs:\n\t\t\tvalues (dict[str, str  |  None]): dict of attributes in the class\n\n\tRaises:\n\t\t\tValueError: if email and username are None\n\n\tReturns:\n\t\t\tdict[str, str | None]: decame dict of attributes in the class\n\n\t\"\"\"\n\tif not values.get('email') and not values.get('username'):\n\t\traise ValueError('User MUST have one of the attributes user or email')\n\treturn values\n</code></pre>"},{"location":"database/models/user/#database.models.user.User","title":"<code>database.models.user.User</code>","text":"<p>               Bases: <code>UserLogin</code></p> Source code in <code>database/models/user.py</code> <pre><code>class User(UserLogin, table=True):\n\t__tablename__ = 'users'\n\n\tid: UUID4 | None = Field(default_factory=uuid4, primary_key=True)\n\n\temail: EmailStr = Field(\n\t\tunique=True,\n\t\tindex=True,\n\t\tnullable=False,\n\t)\n\tusername: str\n</code></pre>"},{"location":"database/repositories/brazil/","title":"brazil","text":""},{"location":"database/repositories/brazil/#database.repositories.brazil.BrazilRepository","title":"<code>database.repositories.brazil.BrazilRepository</code>","text":"Source code in <code>database/repositories/brazil.py</code> <pre><code>class BrazilRepository:\n\t@staticmethod\n\tasync def get_address_by_dc_join_state_join_city(\n\t\tsession: AsyncSession,\n\t\tfilter: AddressFilterInput,\n\t\tpage_size: PositiveInt = 10,\n\t\tpage_number: PositiveInt = 1,\n\t) -&gt; list[Address]:\n\t\t\"\"\"\n\t\tQuery addresses by the strawberry dataclass.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): get the session of database from get_session\n\t\t\t\tfilter (AddressFilterInput): Strawberry input dataclass,\n\t\t\t\t\t\teverything can be None (based on sqlmodel model)\n\t\t\t\tpage_size (PositiveInt, optional): How many elements in each page.\n\t\t\t\t\t\tDefaults to 10.\n\t\t\t\tpage_number (PositiveInt, optional): Number of the page. Defaults to 1.\n\n\t\tReturns:\n\t\t\t\tlist[Address]: All addresses (db model) based on filter or empty list\n\n\t\tTodo:\n\t\t\t\tFix joins with async client\n\n\t\t\"\"\"\n\t\tquery = (\n\t\t\tselect(Address)\n\t\t\t.limit(page_size)\n\t\t\t.offset(page_to_offset(page_size, page_number))\n\t\t)\n\n\t\tif filter.zipcode:\n\t\t\tquery = query.where(Address.zipcode == filter.zipcode)\n\t\telse:\n\t\t\tif filter.neighborhood:\n\t\t\t\tquery = query.where(Address.neighborhood == filter.neighborhood)\n\t\t\tif filter.complement:\n\t\t\t\tquery = query.where(Address.complement == filter.complement)\n\t\t\tif filter.city:\n\t\t\t\tquery = query.join(City).where(City.ibge == filter.city.ibge)\n\t\t\tif filter.state:\n\t\t\t\tquery = query.join(State).where(\n\t\t\t\t\tState.acronym == filter.state.acronym.value\n\t\t\t\t)\n\t\tadresses_result = await session.exec(query)\n\t\taddresses = adresses_result.unique().all()\n\n\t\treturn list(addresses)\n\n\t@staticmethod\n\tasync def insert_address_by_dc(\n\t\tsession: AsyncSession, address: AddressInsertInput\n\t) -&gt; Address:\n\t\t\"\"\"\n\t\tCreate address by the strawberry dataclass.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): get the session of database from get_session\n\t\t\t\taddress (AddressInsertInput): Strawberry input dataclass,\n\t\t\t\t\t\tstrict (based on sqlmodel model)\n\n\t\tRaises:\n\t\t\t\tHTTPException: If city.ibge is not found on database: 404 error\n\n\t\tReturns:\n\t\t\t\tAddress: Single model instance\n\n\t\t\"\"\"\n\t\taddress_model = address.to_pydantic()\n\n\t\tstate_query = select(State).where(\n\t\t\tState.acronym == address.state.acronym.value\n\t\t)\n\t\tstate_result = await session.exec(state_query)\n\t\tstate = state_result.one()\n\t\taddress_model.state = state\n\n\t\tcity_query = select(City).where(City.ibge == address.city.ibge)\n\t\tcity_result = await session.exec(city_query)\n\t\tcity = city_result.one_or_none()\n\t\tif not city:\n\t\t\traise HTTPException(status_code=404, detail='City not found')\n\t\taddress_model.city = city\n\n\t\tsession.add(address_model)\n\t\tawait session.commit()\n\t\tawait session.refresh(address_model)\n\n\t\treturn address_model\n\n\t@staticmethod\n\tasync def insert_address_background(\n\t\tsession: AsyncSession, address: Address\n\t) -&gt; None:\n\t\t\"\"\"\n\t\tInsert addresses and city if not exists in background.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): the session of database from get_session\n\t\t\t\taddress (Address): Address instance based on database models\n\n\t\t\"\"\"\n\t\tstate_query = select(State).where(\n\t\t\tState.acronym == address.state.acronym.value\n\t\t)\n\t\tstate_result = await session.exec(state_query)\n\t\tstate = state_result.one()\n\t\taddress.state = state\n\n\t\tcity_query = select(City).where(City.ibge == address.city.ibge)\n\t\tcity_result = await session.exec(city_query)\n\t\tcity = city_result.one_or_none()\n\t\tif city:\n\t\t\taddress.city = city\n\n\t\tsession.add(address)\n\t\tawait session.commit()\n</code></pre>"},{"location":"database/repositories/brazil/#database.repositories.brazil.BrazilRepository.get_address_by_dc_join_state_join_city","title":"<code>get_address_by_dc_join_state_join_city(session, filter, page_size=10, page_number=1)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Query addresses by the strawberry dataclass.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>get the session of database from get_session</p> required <code>filter</code> <code>AddressFilterInput</code> <p>Strawberry input dataclass, everything can be None (based on sqlmodel model)</p> required <code>page_size</code> <code>PositiveInt</code> <p>How many elements in each page. Defaults to 10.</p> <code>10</code> <code>page_number</code> <code>PositiveInt</code> <p>Number of the page. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>list[Address]</code> <p>list[Address]: All addresses (db model) based on filter or empty list</p> Todo <p>Fix joins with async client</p> Source code in <code>database/repositories/brazil.py</code> <pre><code>@staticmethod\nasync def get_address_by_dc_join_state_join_city(\n\tsession: AsyncSession,\n\tfilter: AddressFilterInput,\n\tpage_size: PositiveInt = 10,\n\tpage_number: PositiveInt = 1,\n) -&gt; list[Address]:\n\t\"\"\"\n\tQuery addresses by the strawberry dataclass.\n\n\tArgs:\n\t\t\tsession (AsyncSession): get the session of database from get_session\n\t\t\tfilter (AddressFilterInput): Strawberry input dataclass,\n\t\t\t\t\teverything can be None (based on sqlmodel model)\n\t\t\tpage_size (PositiveInt, optional): How many elements in each page.\n\t\t\t\t\tDefaults to 10.\n\t\t\tpage_number (PositiveInt, optional): Number of the page. Defaults to 1.\n\n\tReturns:\n\t\t\tlist[Address]: All addresses (db model) based on filter or empty list\n\n\tTodo:\n\t\t\tFix joins with async client\n\n\t\"\"\"\n\tquery = (\n\t\tselect(Address)\n\t\t.limit(page_size)\n\t\t.offset(page_to_offset(page_size, page_number))\n\t)\n\n\tif filter.zipcode:\n\t\tquery = query.where(Address.zipcode == filter.zipcode)\n\telse:\n\t\tif filter.neighborhood:\n\t\t\tquery = query.where(Address.neighborhood == filter.neighborhood)\n\t\tif filter.complement:\n\t\t\tquery = query.where(Address.complement == filter.complement)\n\t\tif filter.city:\n\t\t\tquery = query.join(City).where(City.ibge == filter.city.ibge)\n\t\tif filter.state:\n\t\t\tquery = query.join(State).where(\n\t\t\t\tState.acronym == filter.state.acronym.value\n\t\t\t)\n\tadresses_result = await session.exec(query)\n\taddresses = adresses_result.unique().all()\n\n\treturn list(addresses)\n</code></pre>"},{"location":"database/repositories/brazil/#database.repositories.brazil.BrazilRepository.insert_address_background","title":"<code>insert_address_background(session, address)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Insert addresses and city if not exists in background.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>the session of database from get_session</p> required <code>address</code> <code>Address</code> <p>Address instance based on database models</p> required Source code in <code>database/repositories/brazil.py</code> <pre><code>@staticmethod\nasync def insert_address_background(\n\tsession: AsyncSession, address: Address\n) -&gt; None:\n\t\"\"\"\n\tInsert addresses and city if not exists in background.\n\n\tArgs:\n\t\t\tsession (AsyncSession): the session of database from get_session\n\t\t\taddress (Address): Address instance based on database models\n\n\t\"\"\"\n\tstate_query = select(State).where(\n\t\tState.acronym == address.state.acronym.value\n\t)\n\tstate_result = await session.exec(state_query)\n\tstate = state_result.one()\n\taddress.state = state\n\n\tcity_query = select(City).where(City.ibge == address.city.ibge)\n\tcity_result = await session.exec(city_query)\n\tcity = city_result.one_or_none()\n\tif city:\n\t\taddress.city = city\n\n\tsession.add(address)\n\tawait session.commit()\n</code></pre>"},{"location":"database/repositories/brazil/#database.repositories.brazil.BrazilRepository.insert_address_by_dc","title":"<code>insert_address_by_dc(session, address)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Create address by the strawberry dataclass.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>get the session of database from get_session</p> required <code>address</code> <code>AddressInsertInput</code> <p>Strawberry input dataclass, strict (based on sqlmodel model)</p> required <p>Raises:</p> Type Description <code>HTTPException</code> <p>If city.ibge is not found on database: 404 error</p> <p>Returns:</p> Name Type Description <code>Address</code> <code>Address</code> <p>Single model instance</p> Source code in <code>database/repositories/brazil.py</code> <pre><code>@staticmethod\nasync def insert_address_by_dc(\n\tsession: AsyncSession, address: AddressInsertInput\n) -&gt; Address:\n\t\"\"\"\n\tCreate address by the strawberry dataclass.\n\n\tArgs:\n\t\t\tsession (AsyncSession): get the session of database from get_session\n\t\t\taddress (AddressInsertInput): Strawberry input dataclass,\n\t\t\t\t\tstrict (based on sqlmodel model)\n\n\tRaises:\n\t\t\tHTTPException: If city.ibge is not found on database: 404 error\n\n\tReturns:\n\t\t\tAddress: Single model instance\n\n\t\"\"\"\n\taddress_model = address.to_pydantic()\n\n\tstate_query = select(State).where(\n\t\tState.acronym == address.state.acronym.value\n\t)\n\tstate_result = await session.exec(state_query)\n\tstate = state_result.one()\n\taddress_model.state = state\n\n\tcity_query = select(City).where(City.ibge == address.city.ibge)\n\tcity_result = await session.exec(city_query)\n\tcity = city_result.one_or_none()\n\tif not city:\n\t\traise HTTPException(status_code=404, detail='City not found')\n\taddress_model.city = city\n\n\tsession.add(address_model)\n\tawait session.commit()\n\tawait session.refresh(address_model)\n\n\treturn address_model\n</code></pre>"},{"location":"database/repositories/pagination/","title":"pagination","text":""},{"location":"database/repositories/pagination/#database.repositories.pagination.page_to_offset","title":"<code>database.repositories.pagination.page_to_offset(page_size, page_number)</code>","text":"<p>Calculate the database offset based on page size and number.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>PositiveInt</code> <p>How many elements in each page</p> required <code>page_number</code> <code>PositiveInt</code> <p>Number of the page</p> required <p>Returns:</p> Name Type Description <code>PositiveInt</code> <code>PositiveInt</code> <p>The database offset</p> Source code in <code>database/repositories/pagination.py</code> <pre><code>def page_to_offset(\n\tpage_size: PositiveInt, page_number: PositiveInt\n) -&gt; PositiveInt:\n\t\"\"\"\n\tCalculate the database offset based on page size and number.\n\n\tArgs:\n\t\t\tpage_size (PositiveInt): How many elements in each page\n\t\t\tpage_number (PositiveInt): Number of the page\n\n\tReturns:\n\t\t\tPositiveInt: The database offset\n\n\t\"\"\"\n\tif page_number &lt;= 1:\n\t\treturn 0\n\treturn page_size * (page_number - 1)\n</code></pre>"},{"location":"database/repositories/user/","title":"user","text":""},{"location":"database/repositories/user/#database.repositories.user.UserRepository","title":"<code>database.repositories.user.UserRepository</code>","text":"Source code in <code>database/repositories/user.py</code> <pre><code>class UserRepository:\n\t@staticmethod\n\tasync def get_user_by_id(session: AsyncSession, id: UUID4) -&gt; User | None:\n\t\t\"\"\"\n\t\tGet user by id if exists.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): Database session\n\t\t\t\tid (UUID4): user primary key uuid\n\n\t\tReturns:\n\t\t\t\tUser | None: User DB model or None\n\n\t\t\"\"\"\n\t\tquery = await session.exec(select(User).where(User.id == id))\n\t\treturn query.one_or_none()\n\n\t@staticmethod\n\tasync def get_user_by_email(session: AsyncSession, email: str) -&gt; User | None:\n\t\t\"\"\"\n\t\tGet user by email if exists.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): Database session\n\t\t\t\temail (str): user email unique key\n\n\t\tReturns:\n\t\t\t\tUser | None: User DB model or None\n\n\t\t\"\"\"\n\t\tquery = await session.exec(select(User).where(User.email == email))\n\t\treturn query.one_or_none()\n\n\t@staticmethod\n\tasync def get_user_by_username(\n\t\tsession: AsyncSession, username: str\n\t) -&gt; User | None:\n\t\t\"\"\"\n\t\tGet user by username if exists.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): Database session\n\t\t\t\tusername (str): user username unique key\n\n\t\tReturns:\n\t\t\t\tUser | None: User DB model or None\n\n\t\t\"\"\"\n\t\tquery = await session.exec(select(User).where(User.username == username))\n\t\treturn query.one_or_none()\n\n\t@staticmethod\n\tasync def insert_user(session: AsyncSession, user: User) -&gt; User:\n\t\t\"\"\"\n\t\tInsert user based on model.\n\n\t\tArgs:\n\t\t\t\tsession (AsyncSession): Database session\n\t\t\t\tuser (User): User DB model\n\n\t\tReturns:\n\t\t\t\tUser: User DB model\n\t\t\"\"\"\n\t\tsession.add(user)\n\t\tawait session.commit()\n\n\t\treturn user\n</code></pre>"},{"location":"database/repositories/user/#database.repositories.user.UserRepository.get_user_by_email","title":"<code>get_user_by_email(session, email)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Get user by email if exists.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>email</code> <code>str</code> <p>user email unique key</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: User DB model or None</p> Source code in <code>database/repositories/user.py</code> <pre><code>@staticmethod\nasync def get_user_by_email(session: AsyncSession, email: str) -&gt; User | None:\n\t\"\"\"\n\tGet user by email if exists.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\temail (str): user email unique key\n\n\tReturns:\n\t\t\tUser | None: User DB model or None\n\n\t\"\"\"\n\tquery = await session.exec(select(User).where(User.email == email))\n\treturn query.one_or_none()\n</code></pre>"},{"location":"database/repositories/user/#database.repositories.user.UserRepository.get_user_by_id","title":"<code>get_user_by_id(session, id)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Get user by id if exists.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>id</code> <code>UUID4</code> <p>user primary key uuid</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: User DB model or None</p> Source code in <code>database/repositories/user.py</code> <pre><code>@staticmethod\nasync def get_user_by_id(session: AsyncSession, id: UUID4) -&gt; User | None:\n\t\"\"\"\n\tGet user by id if exists.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\tid (UUID4): user primary key uuid\n\n\tReturns:\n\t\t\tUser | None: User DB model or None\n\n\t\"\"\"\n\tquery = await session.exec(select(User).where(User.id == id))\n\treturn query.one_or_none()\n</code></pre>"},{"location":"database/repositories/user/#database.repositories.user.UserRepository.get_user_by_username","title":"<code>get_user_by_username(session, username)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Get user by username if exists.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>username</code> <code>str</code> <p>user username unique key</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: User DB model or None</p> Source code in <code>database/repositories/user.py</code> <pre><code>@staticmethod\nasync def get_user_by_username(\n\tsession: AsyncSession, username: str\n) -&gt; User | None:\n\t\"\"\"\n\tGet user by username if exists.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\tusername (str): user username unique key\n\n\tReturns:\n\t\t\tUser | None: User DB model or None\n\n\t\"\"\"\n\tquery = await session.exec(select(User).where(User.username == username))\n\treturn query.one_or_none()\n</code></pre>"},{"location":"database/repositories/user/#database.repositories.user.UserRepository.insert_user","title":"<code>insert_user(session, user)</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Insert user based on model.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>Database session</p> required <code>user</code> <code>User</code> <p>User DB model</p> required <p>Returns:</p> Name Type Description <code>User</code> <code>User</code> <p>User DB model</p> Source code in <code>database/repositories/user.py</code> <pre><code>@staticmethod\nasync def insert_user(session: AsyncSession, user: User) -&gt; User:\n\t\"\"\"\n\tInsert user based on model.\n\n\tArgs:\n\t\t\tsession (AsyncSession): Database session\n\t\t\tuser (User): User DB model\n\n\tReturns:\n\t\t\tUser: User DB model\n\t\"\"\"\n\tsession.add(user)\n\tawait session.commit()\n\n\treturn user\n</code></pre>"},{"location":"plugins/plugins_controller/","title":"plugins_controller","text":""},{"location":"plugins/plugins_controller/#plugins.plugins_controller.get_zipcode_from_plugins","title":"<code>plugins.plugins_controller.get_zipcode_from_plugins(zipcode)</code>  <code>async</code>","text":"<p>Async call to all plugins at decame time The first task that returns successfully returns and cancels the others.</p> <p>Parameters:</p> Name Type Description Default <code>zipcode</code> <code>PositiveInt</code> <p>zipcode needed to search address on api's</p> required <p>Returns:</p> Name Type Description <code>DictResponse</code> <code>DictResponse</code> <p>'data' key has all addresses (db model) based on filter or empty list; 'provider' key has the service provider plugin</p> Todo <p>Create all tasks based on config Add logs</p> Source code in <code>plugins/plugins_controller.py</code> <pre><code>async def get_zipcode_from_plugins(\n\tzipcode: PositiveInt,\n) -&gt; DictResponse:\n\t\"\"\"\n\tAsync call to all plugins at decame time\n\tThe first task that returns successfully returns and cancels the others.\n\n\tArgs:\n\t\t\tzipcode (PositiveInt): zipcode needed to search address on api's\n\n\tReturns:\n\t\t\tDictResponse: 'data' key has all addresses\n\t\t\t\t\t(db model) based on filter or empty list;\n\t\t\t\t\t'provider' key has the service provider plugin\n\n\tTodo:\n\t\t\tCreate all tasks based on config\n\t\t\tAdd logs\n\n\t\"\"\"\n\ttasks = []\n\tfor service in [CepAberto, ViaCep]:\n\t\ttry:\n\t\t\tservice_instance = service()\n\t\t\ttasks.append(create_task(service_instance.get_address_by_zipcode(zipcode)))\n\t\texcept Exception:\n\t\t\t# async insert logs\n\t\t\t...\n\n\tfor task in as_completed(tasks):\n\t\ttry:\n\t\t\tresult = await task\n\t\t\tbreak\n\t\texcept Exception as e:\n\t\t\tprint('Erro:', e)\n\t\t\tresult = {'data': [], 'provider': 'Plugins'}\n\t\t\t# there is no address found in this task\n\t\t\t# async insert logs\n\n\treturn result\n</code></pre>"},{"location":"plugins/protocol/","title":"protocol","text":""},{"location":"plugins/protocol/#plugins.protocol.Plugin","title":"<code>plugins.protocol.Plugin</code>","text":"<p>               Bases: <code>Protocol</code></p> Source code in <code>plugins/protocol.py</code> <pre><code>@runtime_checkable\nclass Plugin(Protocol):\n\t@abstractmethod\n\tasync def get_address_by_zipcode(\n\t\tself: Self, zipcode: PositiveInt\n\t) -&gt; DictResponse:\n\t\t\"\"\"Get address by zipcode.\"\"\"\n</code></pre>"},{"location":"plugins/protocol/#plugins.protocol.Plugin.get_address_by_zipcode","title":"<code>get_address_by_zipcode(zipcode)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Get address by zipcode.</p> Source code in <code>plugins/protocol.py</code> <pre><code>@abstractmethod\nasync def get_address_by_zipcode(\n\tself: Self, zipcode: PositiveInt\n) -&gt; DictResponse:\n\t\"\"\"Get address by zipcode.\"\"\"\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/","title":"cep_aberto","text":""},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAbertoState","title":"<code>plugins.cep_aberto.cep_aberto.CepAbertoState</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>class CepAbertoState(TypedDict):\n\tsigla: str\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAbertoCity","title":"<code>plugins.cep_aberto.cep_aberto.CepAbertoCity</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>class CepAbertoCity(TypedDict):\n\tddd: int\n\tibge: str\n\tnome: str\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAbertoAddress","title":"<code>plugins.cep_aberto.cep_aberto.CepAbertoAddress</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>class CepAbertoAddress(TypedDict):\n\taltitude: float\n\tcep: str\n\tlatitude: str\n\tlongitude: str\n\tlogradouro: str\n\tbairro: str\n\tcomplemento: str\n\tcidade: CepAbertoCity\n\testado: CepAbertoState\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAberto","title":"<code>plugins.cep_aberto.cep_aberto.CepAberto</code>","text":"<p>               Bases: <code>Plugin</code></p> <p>The service of https://www.cepaberto.com/ api.</p> Info <p>Currently, the request interval for each user is 1 second. More frequent requests will result in HTTP Error 403 Forbidden. The maximum request limit for each user is 10,000 per day.</p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>class CepAberto(Plugin):\n\t\"\"\"\n\tThe service of https://www.cepaberto.com/ api.\n\n\tInfo:\n\t\t\tCurrently, the request interval for each user is 1 second.\n\t\t\tMore frequent requests will result in HTTP Error 403 Forbidden.\n\t\t\tThe maximum request limit for each user is 10,000 per day.\n\t\"\"\"\n\n\t__slots__ = ('token',)\n\n\tdef __init__(self: Self) -&gt; None:\n\t\t\"\"\"\n\t\tSet token attribute.\n\n\t\tArgs:\n\t\t\t\tself (Self): scope of current class\n\n\t\tRaises:\n\t\t\t\tException: if token does not exists.\n\n\t\tTodo:\n\t\t\t\tFix generic exception\n\n\t\t\"\"\"\n\t\tif not settings.CEP_ABERTO_TOKEN:\n\t\t\traise Exception('Token Inv\u00e1lido')\n\t\tself.token = settings.CEP_ABERTO_TOKEN\n\n\tasync def get_address_by_zipcode(\n\t\tself: Self, zipcode: PositiveInt\n\t) -&gt; DictResponse:\n\t\t\"\"\"\n\t\tGet address by zipcode.\n\n\t\tArgs:\n\t\t\t\tself (Self): scope of the class\n\t\t\t\tzipcode (PositiveInt): Zipcode to search for,\n\t\t\t\t\t\tit should be &gt; 1_000_000 and &lt; 99_999_999\n\n\t\tRaises:\n\t\t\t\tHTTPStatusError: raise_for_status if there's any error status code\n\n\t\tReturns:\n\t\t\t\tDictResponse: data key have a valid address (db model);\n\t\t\t\t\t\tprovider key have 'cep_aberto' str\n\n\t\t\"\"\"\n\t\turl = f'https://www.cepaberto.com/api/v3/cep?cep={zipcode:08}'\n\t\theaders = {'Authorization': f'Token token={self.token}'}\n\t\tasync with AsyncClient(http2=True) as client:\n\t\t\trequest = await client.get(url, headers=headers)\n\t\trequest.raise_for_status()\n\n\t\treturn {\n\t\t\t'data': [await self._request_to_database_model(request.json())],\n\t\t\t'provider': 'cep_aberto',\n\t\t}\n\n\t@classmethod\n\tasync def _request_to_database_model(\n\t\tcls, address_data: CepAbertoAddress\n\t) -&gt; Address:\n\t\t\"\"\"\n\t\tReceive a json/dict and return an Address object.\n\n\t\tArgs:\n\t\t\t\taddress_data (CepAbertoAddress): here's a dict example:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"altitude\": 760.0,\n\t\t\t\t\t\t\t\"cep\": \"01001000\",\n\t\t\t\t\t\t\t\"latitude\": \"-23.5479099981\",\n\t\t\t\t\t\t\t\"longitude\": \"-46.636\",\n\t\t\t\t\t\t\t\"logradouro\": \"Pra\u00e7a da S\u00e9\",\n\t\t\t\t\t\t\t\"bairro\": \"S\u00e9\",\n\t\t\t\t\t\t\t\"complemento\": \"- lado \u00edmpar\",\n\t\t\t\t\t\t\t\"cidade\": {\n\t\t\t\t\t\t\t\t\"ddd\": 11,\n\t\t\t\t\t\t\t\t\"ibge\": \"3550308\",\n\t\t\t\t\t\t\t\t\"nome\": \"S\u00e3o Paulo\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"estado\": {\n\t\t\t\t\t\t\t\t\"sigla\": \"SP\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\tReturns:\n\t\t\t\tAddress: Database model\n\n\t\t\"\"\"\n\t\tacronym = address_data['estado']['sigla']\n\t\tstate = StateCreate(\n\t\t\tacronym=StateAcronym(acronym),\n\t\t\tname=getattr(StateAcronymName, acronym).value,\n\t\t)\n\n\t\tcity = City(\n\t\t\tibge=int(address_data['cidade']['ibge']),\n\t\t\tname=address_data['cidade']['nome'],\n\t\t\tddd=address_data['cidade']['ddd'],\n\t\t)\n\n\t\tlogradouro = (\n\t\t\tf'{address_data['logradouro']} {address_data.get('complemento', '')}'\n\t\t).strip()\n\n\t\treturn Address(\n\t\t\tzipcode=int(address_data['cep']),\n\t\t\tstate=state,\n\t\t\tcity=city,\n\t\t\tneighborhood=address_data['bairro'],\n\t\t\tcomplement=logradouro,\n\t\t\tcoordinates={\n\t\t\t\t'latitude': float(address_data['latitude']),\n\t\t\t\t'longitude': float(address_data['longitude']),\n\t\t\t\t'altitude': address_data.get('altitude'),\n\t\t\t}\n\t\t\tif address_data.get('latitude') and address_data.get('longitude')\n\t\t\telse None,\n\t\t)\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAberto.__init__","title":"<code>__init__()</code>","text":"<p>Set token attribute.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>scope of current class</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>if token does not exists.</p> Todo <p>Fix generic exception</p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>def __init__(self: Self) -&gt; None:\n\t\"\"\"\n\tSet token attribute.\n\n\tArgs:\n\t\t\tself (Self): scope of current class\n\n\tRaises:\n\t\t\tException: if token does not exists.\n\n\tTodo:\n\t\t\tFix generic exception\n\n\t\"\"\"\n\tif not settings.CEP_ABERTO_TOKEN:\n\t\traise Exception('Token Inv\u00e1lido')\n\tself.token = settings.CEP_ABERTO_TOKEN\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAberto.get_address_by_zipcode","title":"<code>get_address_by_zipcode(zipcode)</code>  <code>async</code>","text":"<p>Get address by zipcode.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>scope of the class</p> required <code>zipcode</code> <code>PositiveInt</code> <p>Zipcode to search for, it should be &gt; 1_000_000 and &lt; 99_999_999</p> required <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>raise_for_status if there's any error status code</p> <p>Returns:</p> Name Type Description <code>DictResponse</code> <code>DictResponse</code> <p>data key have a valid address (db model); provider key have 'cep_aberto' str</p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>async def get_address_by_zipcode(\n\tself: Self, zipcode: PositiveInt\n) -&gt; DictResponse:\n\t\"\"\"\n\tGet address by zipcode.\n\n\tArgs:\n\t\t\tself (Self): scope of the class\n\t\t\tzipcode (PositiveInt): Zipcode to search for,\n\t\t\t\t\tit should be &gt; 1_000_000 and &lt; 99_999_999\n\n\tRaises:\n\t\t\tHTTPStatusError: raise_for_status if there's any error status code\n\n\tReturns:\n\t\t\tDictResponse: data key have a valid address (db model);\n\t\t\t\t\tprovider key have 'cep_aberto' str\n\n\t\"\"\"\n\turl = f'https://www.cepaberto.com/api/v3/cep?cep={zipcode:08}'\n\theaders = {'Authorization': f'Token token={self.token}'}\n\tasync with AsyncClient(http2=True) as client:\n\t\trequest = await client.get(url, headers=headers)\n\trequest.raise_for_status()\n\n\treturn {\n\t\t'data': [await self._request_to_database_model(request.json())],\n\t\t'provider': 'cep_aberto',\n\t}\n</code></pre>"},{"location":"plugins/cep_aberto/cep_aberto/#plugins.cep_aberto.cep_aberto.CepAberto._request_to_database_model","title":"<code>_request_to_database_model(address_data)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Receive a json/dict and return an Address object.</p> <p>Parameters:</p> Name Type Description Default <code>address_data</code> <code>CepAbertoAddress</code> <p>here's a dict example: {         \"altitude\": 760.0,         \"cep\": \"01001000\",         \"latitude\": \"-23.5479099981\",         \"longitude\": \"-46.636\",         \"logradouro\": \"Pra\u00e7a da S\u00e9\",         \"bairro\": \"S\u00e9\",         \"complemento\": \"- lado \u00edmpar\",         \"cidade\": {                 \"ddd\": 11,                 \"ibge\": \"3550308\",                 \"nome\": \"S\u00e3o Paulo\"         },         \"estado\": {                 \"sigla\": \"SP\"         } }</p> required <p>Returns:</p> Name Type Description <code>Address</code> <code>Address</code> <p>Database model</p> Source code in <code>plugins/cep_aberto/cep_aberto.py</code> <pre><code>@classmethod\nasync def _request_to_database_model(\n\tcls, address_data: CepAbertoAddress\n) -&gt; Address:\n\t\"\"\"\n\tReceive a json/dict and return an Address object.\n\n\tArgs:\n\t\t\taddress_data (CepAbertoAddress): here's a dict example:\n\t\t\t\t\t{\n\t\t\t\t\t\t\"altitude\": 760.0,\n\t\t\t\t\t\t\"cep\": \"01001000\",\n\t\t\t\t\t\t\"latitude\": \"-23.5479099981\",\n\t\t\t\t\t\t\"longitude\": \"-46.636\",\n\t\t\t\t\t\t\"logradouro\": \"Pra\u00e7a da S\u00e9\",\n\t\t\t\t\t\t\"bairro\": \"S\u00e9\",\n\t\t\t\t\t\t\"complemento\": \"- lado \u00edmpar\",\n\t\t\t\t\t\t\"cidade\": {\n\t\t\t\t\t\t\t\"ddd\": 11,\n\t\t\t\t\t\t\t\"ibge\": \"3550308\",\n\t\t\t\t\t\t\t\"nome\": \"S\u00e3o Paulo\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"estado\": {\n\t\t\t\t\t\t\t\"sigla\": \"SP\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\tReturns:\n\t\t\tAddress: Database model\n\n\t\"\"\"\n\tacronym = address_data['estado']['sigla']\n\tstate = StateCreate(\n\t\tacronym=StateAcronym(acronym),\n\t\tname=getattr(StateAcronymName, acronym).value,\n\t)\n\n\tcity = City(\n\t\tibge=int(address_data['cidade']['ibge']),\n\t\tname=address_data['cidade']['nome'],\n\t\tddd=address_data['cidade']['ddd'],\n\t)\n\n\tlogradouro = (\n\t\tf'{address_data['logradouro']} {address_data.get('complemento', '')}'\n\t).strip()\n\n\treturn Address(\n\t\tzipcode=int(address_data['cep']),\n\t\tstate=state,\n\t\tcity=city,\n\t\tneighborhood=address_data['bairro'],\n\t\tcomplement=logradouro,\n\t\tcoordinates={\n\t\t\t'latitude': float(address_data['latitude']),\n\t\t\t'longitude': float(address_data['longitude']),\n\t\t\t'altitude': address_data.get('altitude'),\n\t\t}\n\t\tif address_data.get('latitude') and address_data.get('longitude')\n\t\telse None,\n\t)\n</code></pre>"},{"location":"plugins/viacep/viacep/","title":"viacep","text":""},{"location":"plugins/viacep/viacep/#plugins.viacep.viacep.ViaCepAddress","title":"<code>plugins.viacep.viacep.ViaCepAddress</code>","text":"<p>               Bases: <code>TypedDict</code></p> Source code in <code>plugins/viacep/viacep.py</code> <pre><code>class ViaCepAddress(TypedDict):\n\tcep: str\n\tlogradouro: str\n\tcomplemento: str\n\tbairro: str\n\tlocalidade: str\n\tuf: str\n\tibge: str\n\tgia: str\n\tddd: str\n\tsiafi: str\n</code></pre>"},{"location":"plugins/viacep/viacep/#plugins.viacep.viacep.ViaCep","title":"<code>plugins.viacep.viacep.ViaCep</code>","text":"<p>               Bases: <code>Plugin</code></p> <p>The service of https://viacep.com.br/ api.</p> Source code in <code>plugins/viacep/viacep.py</code> <pre><code>class ViaCep(Plugin):\n\t\"\"\"The service of https://viacep.com.br/ api.\"\"\"\n\n\tasync def get_address_by_zipcode(\n\t\tself: Self, zipcode: PositiveInt\n\t) -&gt; DictResponse:\n\t\t\"\"\"\n\t\tGet address by zipcode.\n\n\t\tArgs:\n\t\t\t\tself (Self): scope of the class\n\t\t\t\tzipcode (PositiveInt): Zipcode to search for,\n\t\t\t\t\t\tit should be &gt; 1_000_000 and &lt; 99_999_999\n\n\t\tRaises:\n\t\t\t\tHTTPStatusError: raise_for_status if there's any error status code\n\n\t\tReturns:\n\t\t\t\tDictResponse: data key have a valid address (db model);\n\t\t\t\t\t\tprovider key have 'viacep' str\n\n\t\t\"\"\"\n\t\tasync with AsyncClient(http2=True) as client:\n\t\t\trequest = await client.get(f'https://viacep.com.br/ws/{zipcode:08}/json/')\n\t\trequest.raise_for_status()\n\t\trequest_json = request.json()\n\t\tif request_json.get('erro'):\n\t\t\traise HTTPStatusError('Zipcode not found')\n\n\t\treturn {\n\t\t\t'data': [await self._request_to_database_model(request_json)],\n\t\t\t'provider': 'viacep',\n\t\t}\n\n\t@classmethod\n\tasync def _request_to_database_model(\n\t\tcls, address_data: ViaCepAddress\n\t) -&gt; Address:\n\t\t\"\"\"\n\t\tReceive a json/dict and return an Address object.\n\n\t\tArgs:\n\t\t\t\taddress_data (ViaCepAddress): here's a dict example:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"cep\": \"01001-000\",\n\t\t\t\t\t\t\t\"logradouro\": \"Pra\u00e7a da S\u00e9\",\n\t\t\t\t\t\t\t\"complemento\": \"lado \u00edmpar\",\n\t\t\t\t\t\t\t\"bairro\": \"S\u00e9\",\n\t\t\t\t\t\t\t\"localidade\": \"S\u00e3o Paulo\",\n\t\t\t\t\t\t\t\"uf\": \"SP\",\n\t\t\t\t\t\t\t\"ibge\": \"3550308\",\n\t\t\t\t\t\t\t\"gia\": \"1004\",\n\t\t\t\t\t\t\t\"ddd\": \"11\",\n\t\t\t\t\t\t\t\"siafi\": \"7107\"\n\t\t\t\t\t\t}\n\n\t\tReturns:\n\t\t\t\tAddress: Database model\n\n\t\t\"\"\"\n\t\tacronym = address_data['uf']\n\t\tstate = StateCreate(\n\t\t\tacronym=StateAcronym(acronym),\n\t\t\tname=getattr(StateAcronymName, acronym).value,\n\t\t)\n\n\t\tcity = City(\n\t\t\tibge=int(address_data['ibge']),\n\t\t\tname=address_data['localidade'],\n\t\t\tddd=int(address_data['ddd']),\n\t\t)\n\t\tlogradouro = None\n\t\tif address_data['logradouro']:\n\t\t\tlogradouro = (\n\t\t\t\tf'{address_data['logradouro']} {address_data['complemento']}'\n\t\t\t).strip()\n\n\t\treturn Address(\n\t\t\tzipcode=int(address_data['cep'].replace('-', '')),\n\t\t\tstate=state,\n\t\t\tcity=city,\n\t\t\tneighborhood=address_data['bairro'],\n\t\t\tcomplement=logradouro,\n\t\t)\n</code></pre>"},{"location":"plugins/viacep/viacep/#plugins.viacep.viacep.ViaCep.get_address_by_zipcode","title":"<code>get_address_by_zipcode(zipcode)</code>  <code>async</code>","text":"<p>Get address by zipcode.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Self</code> <p>scope of the class</p> required <code>zipcode</code> <code>PositiveInt</code> <p>Zipcode to search for, it should be &gt; 1_000_000 and &lt; 99_999_999</p> required <p>Raises:</p> Type Description <code>HTTPStatusError</code> <p>raise_for_status if there's any error status code</p> <p>Returns:</p> Name Type Description <code>DictResponse</code> <code>DictResponse</code> <p>data key have a valid address (db model); provider key have 'viacep' str</p> Source code in <code>plugins/viacep/viacep.py</code> <pre><code>async def get_address_by_zipcode(\n\tself: Self, zipcode: PositiveInt\n) -&gt; DictResponse:\n\t\"\"\"\n\tGet address by zipcode.\n\n\tArgs:\n\t\t\tself (Self): scope of the class\n\t\t\tzipcode (PositiveInt): Zipcode to search for,\n\t\t\t\t\tit should be &gt; 1_000_000 and &lt; 99_999_999\n\n\tRaises:\n\t\t\tHTTPStatusError: raise_for_status if there's any error status code\n\n\tReturns:\n\t\t\tDictResponse: data key have a valid address (db model);\n\t\t\t\t\tprovider key have 'viacep' str\n\n\t\"\"\"\n\tasync with AsyncClient(http2=True) as client:\n\t\trequest = await client.get(f'https://viacep.com.br/ws/{zipcode:08}/json/')\n\trequest.raise_for_status()\n\trequest_json = request.json()\n\tif request_json.get('erro'):\n\t\traise HTTPStatusError('Zipcode not found')\n\n\treturn {\n\t\t'data': [await self._request_to_database_model(request_json)],\n\t\t'provider': 'viacep',\n\t}\n</code></pre>"},{"location":"plugins/viacep/viacep/#plugins.viacep.viacep.ViaCep._request_to_database_model","title":"<code>_request_to_database_model(address_data)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Receive a json/dict and return an Address object.</p> <p>Parameters:</p> Name Type Description Default <code>address_data</code> <code>ViaCepAddress</code> <p>here's a dict example: {         \"cep\": \"01001-000\",         \"logradouro\": \"Pra\u00e7a da S\u00e9\",         \"complemento\": \"lado \u00edmpar\",         \"bairro\": \"S\u00e9\",         \"localidade\": \"S\u00e3o Paulo\",         \"uf\": \"SP\",         \"ibge\": \"3550308\",         \"gia\": \"1004\",         \"ddd\": \"11\",         \"siafi\": \"7107\" }</p> required <p>Returns:</p> Name Type Description <code>Address</code> <code>Address</code> <p>Database model</p> Source code in <code>plugins/viacep/viacep.py</code> <pre><code>@classmethod\nasync def _request_to_database_model(\n\tcls, address_data: ViaCepAddress\n) -&gt; Address:\n\t\"\"\"\n\tReceive a json/dict and return an Address object.\n\n\tArgs:\n\t\t\taddress_data (ViaCepAddress): here's a dict example:\n\t\t\t\t\t{\n\t\t\t\t\t\t\"cep\": \"01001-000\",\n\t\t\t\t\t\t\"logradouro\": \"Pra\u00e7a da S\u00e9\",\n\t\t\t\t\t\t\"complemento\": \"lado \u00edmpar\",\n\t\t\t\t\t\t\"bairro\": \"S\u00e9\",\n\t\t\t\t\t\t\"localidade\": \"S\u00e3o Paulo\",\n\t\t\t\t\t\t\"uf\": \"SP\",\n\t\t\t\t\t\t\"ibge\": \"3550308\",\n\t\t\t\t\t\t\"gia\": \"1004\",\n\t\t\t\t\t\t\"ddd\": \"11\",\n\t\t\t\t\t\t\"siafi\": \"7107\"\n\t\t\t\t\t}\n\n\tReturns:\n\t\t\tAddress: Database model\n\n\t\"\"\"\n\tacronym = address_data['uf']\n\tstate = StateCreate(\n\t\tacronym=StateAcronym(acronym),\n\t\tname=getattr(StateAcronymName, acronym).value,\n\t)\n\n\tcity = City(\n\t\tibge=int(address_data['ibge']),\n\t\tname=address_data['localidade'],\n\t\tddd=int(address_data['ddd']),\n\t)\n\tlogradouro = None\n\tif address_data['logradouro']:\n\t\tlogradouro = (\n\t\t\tf'{address_data['logradouro']} {address_data['complemento']}'\n\t\t).strip()\n\n\treturn Address(\n\t\tzipcode=int(address_data['cep'].replace('-', '')),\n\t\tstate=state,\n\t\tcity=city,\n\t\tneighborhood=address_data['bairro'],\n\t\tcomplement=logradouro,\n\t)\n</code></pre>"},{"location":"utils/settings/","title":"settings","text":""},{"location":"utils/settings/#utils.settings.UrlValidate","title":"<code>utils.settings.UrlValidate</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>utils/settings.py</code> <pre><code>class UrlValidate(BaseModel):\n\turl: PostgresDsn\n</code></pre>"},{"location":"utils/settings/#utils.settings.Settings","title":"<code>utils.settings.Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> Source code in <code>utils/settings.py</code> <pre><code>class Settings(BaseSettings):\n\tmodel_config = SettingsConfigDict(\n\t\tenv_file='.env', env_file_encoding='utf-8', frozen=True\n\t)\n\tDEV: bool\n\n\tDATABASE_USER: str\n\tDATABASE_PASSWORD: str\n\tDATABASE_HOST: str\n\tDATABASE_PORT: PositiveInt = 5432\n\tDATABASE_NAME: str\n\n\tJWT_SECRET_KEY: str\n\tJWT_ALGORITHM: str = 'HS256'\n\tACCESS_TOKEN_EXPIRE_MINUTES: PositiveInt = 30\n\n\tTIME_ZONE: str = 'UTC'\n\n\tCEP_ABERTO_TOKEN: str | None = None\n\n\t@computed_field  # type: ignore[prop-decorator]\n\t@property\n\tdef DATABASE_URL(self: Self) -&gt; str:\n\t\t\"\"\"Generate and validate database url based on other fields.\"\"\"\n\t\turl = (\n\t\t\t'postgresql+psycopg://'\n\t\t\tf'{self.DATABASE_USER}:{quote_plus(self.DATABASE_PASSWORD)}@'\n\t\t\tf'{self.DATABASE_HOST}:{self.DATABASE_PORT}/{self.DATABASE_NAME}'\n\t\t)\n\n\t\treturn str(UrlValidate(url=url).url)\n</code></pre>"},{"location":"utils/settings/#utils.settings.Settings.DATABASE_URL","title":"<code>DATABASE_URL: str</code>  <code>property</code>","text":"<p>Generate and validate database url based on other fields.</p>"},{"location":"utils/settings/#utils.settings.settings","title":"<code>utils.settings.settings = Settings()</code>  <code>module-attribute</code>","text":""}]}
